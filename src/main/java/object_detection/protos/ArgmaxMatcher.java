// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/argmax_matcher.proto

package object_detection.protos;

public final class ArgmaxMatcher {
  private ArgmaxMatcher() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ArgMaxMatcherOrBuilder extends
      // @@protoc_insertion_point(interface_extends:object_detection.protos.ArgMaxMatcher)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Threshold for positive matches.
     * </pre>
     *
     * <code>optional float matched_threshold = 1 [default = 0.5];</code>
     */
    boolean hasMatchedThreshold();
    /**
     * <pre>
     * Threshold for positive matches.
     * </pre>
     *
     * <code>optional float matched_threshold = 1 [default = 0.5];</code>
     */
    float getMatchedThreshold();

    /**
     * <pre>
     * Threshold for negative matches.
     * </pre>
     *
     * <code>optional float unmatched_threshold = 2 [default = 0.5];</code>
     */
    boolean hasUnmatchedThreshold();
    /**
     * <pre>
     * Threshold for negative matches.
     * </pre>
     *
     * <code>optional float unmatched_threshold = 2 [default = 0.5];</code>
     */
    float getUnmatchedThreshold();

    /**
     * <pre>
     * Whether to construct ArgMaxMatcher without thresholds.
     * </pre>
     *
     * <code>optional bool ignore_thresholds = 3 [default = false];</code>
     */
    boolean hasIgnoreThresholds();
    /**
     * <pre>
     * Whether to construct ArgMaxMatcher without thresholds.
     * </pre>
     *
     * <code>optional bool ignore_thresholds = 3 [default = false];</code>
     */
    boolean getIgnoreThresholds();

    /**
     * <pre>
     * If True then negative matches are the ones below the unmatched_threshold,
     * whereas ignored matches are in between the matched and umatched
     * threshold. If False, then negative matches are in between the matched
     * and unmatched threshold, and everything lower than unmatched is ignored.
     * </pre>
     *
     * <code>optional bool negatives_lower_than_unmatched = 4 [default = true];</code>
     */
    boolean hasNegativesLowerThanUnmatched();
    /**
     * <pre>
     * If True then negative matches are the ones below the unmatched_threshold,
     * whereas ignored matches are in between the matched and umatched
     * threshold. If False, then negative matches are in between the matched
     * and unmatched threshold, and everything lower than unmatched is ignored.
     * </pre>
     *
     * <code>optional bool negatives_lower_than_unmatched = 4 [default = true];</code>
     */
    boolean getNegativesLowerThanUnmatched();

    /**
     * <pre>
     * Whether to ensure each row is matched to at least one column.
     * </pre>
     *
     * <code>optional bool force_match_for_each_row = 5 [default = false];</code>
     */
    boolean hasForceMatchForEachRow();
    /**
     * <pre>
     * Whether to ensure each row is matched to at least one column.
     * </pre>
     *
     * <code>optional bool force_match_for_each_row = 5 [default = false];</code>
     */
    boolean getForceMatchForEachRow();

    /**
     * <pre>
     * Force constructed match objects to use matrix multiplication based gather
     * instead of standard tf.gather
     * </pre>
     *
     * <code>optional bool use_matmul_gather = 6 [default = false];</code>
     */
    boolean hasUseMatmulGather();
    /**
     * <pre>
     * Force constructed match objects to use matrix multiplication based gather
     * instead of standard tf.gather
     * </pre>
     *
     * <code>optional bool use_matmul_gather = 6 [default = false];</code>
     */
    boolean getUseMatmulGather();
  }
  /**
   * <pre>
   * Configuration proto for ArgMaxMatcher. See
   * matchers/argmax_matcher.py for details.
   * </pre>
   *
   * Protobuf type {@code object_detection.protos.ArgMaxMatcher}
   */
  public  static final class ArgMaxMatcher extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:object_detection.protos.ArgMaxMatcher)
      ArgMaxMatcherOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ArgMaxMatcher.newBuilder() to construct.
    private ArgMaxMatcher(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ArgMaxMatcher() {
      matchedThreshold_ = 0.5F;
      unmatchedThreshold_ = 0.5F;
      ignoreThresholds_ = false;
      negativesLowerThanUnmatched_ = true;
      forceMatchForEachRow_ = false;
      useMatmulGather_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ArgMaxMatcher(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              bitField0_ |= 0x00000001;
              matchedThreshold_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              unmatchedThreshold_ = input.readFloat();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              ignoreThresholds_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              negativesLowerThanUnmatched_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              forceMatchForEachRow_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              useMatmulGather_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return object_detection.protos.ArgmaxMatcher.internal_static_object_detection_protos_ArgMaxMatcher_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return object_detection.protos.ArgmaxMatcher.internal_static_object_detection_protos_ArgMaxMatcher_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              object_detection.protos.ArgmaxMatcher.ArgMaxMatcher.class, object_detection.protos.ArgmaxMatcher.ArgMaxMatcher.Builder.class);
    }

    private int bitField0_;
    public static final int MATCHED_THRESHOLD_FIELD_NUMBER = 1;
    private float matchedThreshold_;
    /**
     * <pre>
     * Threshold for positive matches.
     * </pre>
     *
     * <code>optional float matched_threshold = 1 [default = 0.5];</code>
     */
    public boolean hasMatchedThreshold() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Threshold for positive matches.
     * </pre>
     *
     * <code>optional float matched_threshold = 1 [default = 0.5];</code>
     */
    public float getMatchedThreshold() {
      return matchedThreshold_;
    }

    public static final int UNMATCHED_THRESHOLD_FIELD_NUMBER = 2;
    private float unmatchedThreshold_;
    /**
     * <pre>
     * Threshold for negative matches.
     * </pre>
     *
     * <code>optional float unmatched_threshold = 2 [default = 0.5];</code>
     */
    public boolean hasUnmatchedThreshold() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Threshold for negative matches.
     * </pre>
     *
     * <code>optional float unmatched_threshold = 2 [default = 0.5];</code>
     */
    public float getUnmatchedThreshold() {
      return unmatchedThreshold_;
    }

    public static final int IGNORE_THRESHOLDS_FIELD_NUMBER = 3;
    private boolean ignoreThresholds_;
    /**
     * <pre>
     * Whether to construct ArgMaxMatcher without thresholds.
     * </pre>
     *
     * <code>optional bool ignore_thresholds = 3 [default = false];</code>
     */
    public boolean hasIgnoreThresholds() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Whether to construct ArgMaxMatcher without thresholds.
     * </pre>
     *
     * <code>optional bool ignore_thresholds = 3 [default = false];</code>
     */
    public boolean getIgnoreThresholds() {
      return ignoreThresholds_;
    }

    public static final int NEGATIVES_LOWER_THAN_UNMATCHED_FIELD_NUMBER = 4;
    private boolean negativesLowerThanUnmatched_;
    /**
     * <pre>
     * If True then negative matches are the ones below the unmatched_threshold,
     * whereas ignored matches are in between the matched and umatched
     * threshold. If False, then negative matches are in between the matched
     * and unmatched threshold, and everything lower than unmatched is ignored.
     * </pre>
     *
     * <code>optional bool negatives_lower_than_unmatched = 4 [default = true];</code>
     */
    public boolean hasNegativesLowerThanUnmatched() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * If True then negative matches are the ones below the unmatched_threshold,
     * whereas ignored matches are in between the matched and umatched
     * threshold. If False, then negative matches are in between the matched
     * and unmatched threshold, and everything lower than unmatched is ignored.
     * </pre>
     *
     * <code>optional bool negatives_lower_than_unmatched = 4 [default = true];</code>
     */
    public boolean getNegativesLowerThanUnmatched() {
      return negativesLowerThanUnmatched_;
    }

    public static final int FORCE_MATCH_FOR_EACH_ROW_FIELD_NUMBER = 5;
    private boolean forceMatchForEachRow_;
    /**
     * <pre>
     * Whether to ensure each row is matched to at least one column.
     * </pre>
     *
     * <code>optional bool force_match_for_each_row = 5 [default = false];</code>
     */
    public boolean hasForceMatchForEachRow() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Whether to ensure each row is matched to at least one column.
     * </pre>
     *
     * <code>optional bool force_match_for_each_row = 5 [default = false];</code>
     */
    public boolean getForceMatchForEachRow() {
      return forceMatchForEachRow_;
    }

    public static final int USE_MATMUL_GATHER_FIELD_NUMBER = 6;
    private boolean useMatmulGather_;
    /**
     * <pre>
     * Force constructed match objects to use matrix multiplication based gather
     * instead of standard tf.gather
     * </pre>
     *
     * <code>optional bool use_matmul_gather = 6 [default = false];</code>
     */
    public boolean hasUseMatmulGather() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * Force constructed match objects to use matrix multiplication based gather
     * instead of standard tf.gather
     * </pre>
     *
     * <code>optional bool use_matmul_gather = 6 [default = false];</code>
     */
    public boolean getUseMatmulGather() {
      return useMatmulGather_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, matchedThreshold_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, unmatchedThreshold_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, ignoreThresholds_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, negativesLowerThanUnmatched_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, forceMatchForEachRow_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, useMatmulGather_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, matchedThreshold_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, unmatchedThreshold_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, ignoreThresholds_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, negativesLowerThanUnmatched_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, forceMatchForEachRow_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, useMatmulGather_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof object_detection.protos.ArgmaxMatcher.ArgMaxMatcher)) {
        return super.equals(obj);
      }
      object_detection.protos.ArgmaxMatcher.ArgMaxMatcher other = (object_detection.protos.ArgmaxMatcher.ArgMaxMatcher) obj;

      boolean result = true;
      result = result && (hasMatchedThreshold() == other.hasMatchedThreshold());
      if (hasMatchedThreshold()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMatchedThreshold())
            == java.lang.Float.floatToIntBits(
                other.getMatchedThreshold()));
      }
      result = result && (hasUnmatchedThreshold() == other.hasUnmatchedThreshold());
      if (hasUnmatchedThreshold()) {
        result = result && (
            java.lang.Float.floatToIntBits(getUnmatchedThreshold())
            == java.lang.Float.floatToIntBits(
                other.getUnmatchedThreshold()));
      }
      result = result && (hasIgnoreThresholds() == other.hasIgnoreThresholds());
      if (hasIgnoreThresholds()) {
        result = result && (getIgnoreThresholds()
            == other.getIgnoreThresholds());
      }
      result = result && (hasNegativesLowerThanUnmatched() == other.hasNegativesLowerThanUnmatched());
      if (hasNegativesLowerThanUnmatched()) {
        result = result && (getNegativesLowerThanUnmatched()
            == other.getNegativesLowerThanUnmatched());
      }
      result = result && (hasForceMatchForEachRow() == other.hasForceMatchForEachRow());
      if (hasForceMatchForEachRow()) {
        result = result && (getForceMatchForEachRow()
            == other.getForceMatchForEachRow());
      }
      result = result && (hasUseMatmulGather() == other.hasUseMatmulGather());
      if (hasUseMatmulGather()) {
        result = result && (getUseMatmulGather()
            == other.getUseMatmulGather());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMatchedThreshold()) {
        hash = (37 * hash) + MATCHED_THRESHOLD_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMatchedThreshold());
      }
      if (hasUnmatchedThreshold()) {
        hash = (37 * hash) + UNMATCHED_THRESHOLD_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getUnmatchedThreshold());
      }
      if (hasIgnoreThresholds()) {
        hash = (37 * hash) + IGNORE_THRESHOLDS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIgnoreThresholds());
      }
      if (hasNegativesLowerThanUnmatched()) {
        hash = (37 * hash) + NEGATIVES_LOWER_THAN_UNMATCHED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNegativesLowerThanUnmatched());
      }
      if (hasForceMatchForEachRow()) {
        hash = (37 * hash) + FORCE_MATCH_FOR_EACH_ROW_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getForceMatchForEachRow());
      }
      if (hasUseMatmulGather()) {
        hash = (37 * hash) + USE_MATMUL_GATHER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUseMatmulGather());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(object_detection.protos.ArgmaxMatcher.ArgMaxMatcher prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Configuration proto for ArgMaxMatcher. See
     * matchers/argmax_matcher.py for details.
     * </pre>
     *
     * Protobuf type {@code object_detection.protos.ArgMaxMatcher}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:object_detection.protos.ArgMaxMatcher)
        object_detection.protos.ArgmaxMatcher.ArgMaxMatcherOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return object_detection.protos.ArgmaxMatcher.internal_static_object_detection_protos_ArgMaxMatcher_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return object_detection.protos.ArgmaxMatcher.internal_static_object_detection_protos_ArgMaxMatcher_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                object_detection.protos.ArgmaxMatcher.ArgMaxMatcher.class, object_detection.protos.ArgmaxMatcher.ArgMaxMatcher.Builder.class);
      }

      // Construct using object_detection.protos.ArgmaxMatcher.ArgMaxMatcher.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        matchedThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000001);
        unmatchedThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000002);
        ignoreThresholds_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        negativesLowerThanUnmatched_ = true;
        bitField0_ = (bitField0_ & ~0x00000008);
        forceMatchForEachRow_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        useMatmulGather_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return object_detection.protos.ArgmaxMatcher.internal_static_object_detection_protos_ArgMaxMatcher_descriptor;
      }

      @java.lang.Override
      public object_detection.protos.ArgmaxMatcher.ArgMaxMatcher getDefaultInstanceForType() {
        return object_detection.protos.ArgmaxMatcher.ArgMaxMatcher.getDefaultInstance();
      }

      @java.lang.Override
      public object_detection.protos.ArgmaxMatcher.ArgMaxMatcher build() {
        object_detection.protos.ArgmaxMatcher.ArgMaxMatcher result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public object_detection.protos.ArgmaxMatcher.ArgMaxMatcher buildPartial() {
        object_detection.protos.ArgmaxMatcher.ArgMaxMatcher result = new object_detection.protos.ArgmaxMatcher.ArgMaxMatcher(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.matchedThreshold_ = matchedThreshold_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.unmatchedThreshold_ = unmatchedThreshold_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.ignoreThresholds_ = ignoreThresholds_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.negativesLowerThanUnmatched_ = negativesLowerThanUnmatched_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.forceMatchForEachRow_ = forceMatchForEachRow_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.useMatmulGather_ = useMatmulGather_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof object_detection.protos.ArgmaxMatcher.ArgMaxMatcher) {
          return mergeFrom((object_detection.protos.ArgmaxMatcher.ArgMaxMatcher)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(object_detection.protos.ArgmaxMatcher.ArgMaxMatcher other) {
        if (other == object_detection.protos.ArgmaxMatcher.ArgMaxMatcher.getDefaultInstance()) return this;
        if (other.hasMatchedThreshold()) {
          setMatchedThreshold(other.getMatchedThreshold());
        }
        if (other.hasUnmatchedThreshold()) {
          setUnmatchedThreshold(other.getUnmatchedThreshold());
        }
        if (other.hasIgnoreThresholds()) {
          setIgnoreThresholds(other.getIgnoreThresholds());
        }
        if (other.hasNegativesLowerThanUnmatched()) {
          setNegativesLowerThanUnmatched(other.getNegativesLowerThanUnmatched());
        }
        if (other.hasForceMatchForEachRow()) {
          setForceMatchForEachRow(other.getForceMatchForEachRow());
        }
        if (other.hasUseMatmulGather()) {
          setUseMatmulGather(other.getUseMatmulGather());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        object_detection.protos.ArgmaxMatcher.ArgMaxMatcher parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (object_detection.protos.ArgmaxMatcher.ArgMaxMatcher) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float matchedThreshold_ = 0.5F;
      /**
       * <pre>
       * Threshold for positive matches.
       * </pre>
       *
       * <code>optional float matched_threshold = 1 [default = 0.5];</code>
       */
      public boolean hasMatchedThreshold() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Threshold for positive matches.
       * </pre>
       *
       * <code>optional float matched_threshold = 1 [default = 0.5];</code>
       */
      public float getMatchedThreshold() {
        return matchedThreshold_;
      }
      /**
       * <pre>
       * Threshold for positive matches.
       * </pre>
       *
       * <code>optional float matched_threshold = 1 [default = 0.5];</code>
       */
      public Builder setMatchedThreshold(float value) {
        bitField0_ |= 0x00000001;
        matchedThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Threshold for positive matches.
       * </pre>
       *
       * <code>optional float matched_threshold = 1 [default = 0.5];</code>
       */
      public Builder clearMatchedThreshold() {
        bitField0_ = (bitField0_ & ~0x00000001);
        matchedThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      private float unmatchedThreshold_ = 0.5F;
      /**
       * <pre>
       * Threshold for negative matches.
       * </pre>
       *
       * <code>optional float unmatched_threshold = 2 [default = 0.5];</code>
       */
      public boolean hasUnmatchedThreshold() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Threshold for negative matches.
       * </pre>
       *
       * <code>optional float unmatched_threshold = 2 [default = 0.5];</code>
       */
      public float getUnmatchedThreshold() {
        return unmatchedThreshold_;
      }
      /**
       * <pre>
       * Threshold for negative matches.
       * </pre>
       *
       * <code>optional float unmatched_threshold = 2 [default = 0.5];</code>
       */
      public Builder setUnmatchedThreshold(float value) {
        bitField0_ |= 0x00000002;
        unmatchedThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Threshold for negative matches.
       * </pre>
       *
       * <code>optional float unmatched_threshold = 2 [default = 0.5];</code>
       */
      public Builder clearUnmatchedThreshold() {
        bitField0_ = (bitField0_ & ~0x00000002);
        unmatchedThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      private boolean ignoreThresholds_ ;
      /**
       * <pre>
       * Whether to construct ArgMaxMatcher without thresholds.
       * </pre>
       *
       * <code>optional bool ignore_thresholds = 3 [default = false];</code>
       */
      public boolean hasIgnoreThresholds() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Whether to construct ArgMaxMatcher without thresholds.
       * </pre>
       *
       * <code>optional bool ignore_thresholds = 3 [default = false];</code>
       */
      public boolean getIgnoreThresholds() {
        return ignoreThresholds_;
      }
      /**
       * <pre>
       * Whether to construct ArgMaxMatcher without thresholds.
       * </pre>
       *
       * <code>optional bool ignore_thresholds = 3 [default = false];</code>
       */
      public Builder setIgnoreThresholds(boolean value) {
        bitField0_ |= 0x00000004;
        ignoreThresholds_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to construct ArgMaxMatcher without thresholds.
       * </pre>
       *
       * <code>optional bool ignore_thresholds = 3 [default = false];</code>
       */
      public Builder clearIgnoreThresholds() {
        bitField0_ = (bitField0_ & ~0x00000004);
        ignoreThresholds_ = false;
        onChanged();
        return this;
      }

      private boolean negativesLowerThanUnmatched_ = true;
      /**
       * <pre>
       * If True then negative matches are the ones below the unmatched_threshold,
       * whereas ignored matches are in between the matched and umatched
       * threshold. If False, then negative matches are in between the matched
       * and unmatched threshold, and everything lower than unmatched is ignored.
       * </pre>
       *
       * <code>optional bool negatives_lower_than_unmatched = 4 [default = true];</code>
       */
      public boolean hasNegativesLowerThanUnmatched() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * If True then negative matches are the ones below the unmatched_threshold,
       * whereas ignored matches are in between the matched and umatched
       * threshold. If False, then negative matches are in between the matched
       * and unmatched threshold, and everything lower than unmatched is ignored.
       * </pre>
       *
       * <code>optional bool negatives_lower_than_unmatched = 4 [default = true];</code>
       */
      public boolean getNegativesLowerThanUnmatched() {
        return negativesLowerThanUnmatched_;
      }
      /**
       * <pre>
       * If True then negative matches are the ones below the unmatched_threshold,
       * whereas ignored matches are in between the matched and umatched
       * threshold. If False, then negative matches are in between the matched
       * and unmatched threshold, and everything lower than unmatched is ignored.
       * </pre>
       *
       * <code>optional bool negatives_lower_than_unmatched = 4 [default = true];</code>
       */
      public Builder setNegativesLowerThanUnmatched(boolean value) {
        bitField0_ |= 0x00000008;
        negativesLowerThanUnmatched_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If True then negative matches are the ones below the unmatched_threshold,
       * whereas ignored matches are in between the matched and umatched
       * threshold. If False, then negative matches are in between the matched
       * and unmatched threshold, and everything lower than unmatched is ignored.
       * </pre>
       *
       * <code>optional bool negatives_lower_than_unmatched = 4 [default = true];</code>
       */
      public Builder clearNegativesLowerThanUnmatched() {
        bitField0_ = (bitField0_ & ~0x00000008);
        negativesLowerThanUnmatched_ = true;
        onChanged();
        return this;
      }

      private boolean forceMatchForEachRow_ ;
      /**
       * <pre>
       * Whether to ensure each row is matched to at least one column.
       * </pre>
       *
       * <code>optional bool force_match_for_each_row = 5 [default = false];</code>
       */
      public boolean hasForceMatchForEachRow() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Whether to ensure each row is matched to at least one column.
       * </pre>
       *
       * <code>optional bool force_match_for_each_row = 5 [default = false];</code>
       */
      public boolean getForceMatchForEachRow() {
        return forceMatchForEachRow_;
      }
      /**
       * <pre>
       * Whether to ensure each row is matched to at least one column.
       * </pre>
       *
       * <code>optional bool force_match_for_each_row = 5 [default = false];</code>
       */
      public Builder setForceMatchForEachRow(boolean value) {
        bitField0_ |= 0x00000010;
        forceMatchForEachRow_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to ensure each row is matched to at least one column.
       * </pre>
       *
       * <code>optional bool force_match_for_each_row = 5 [default = false];</code>
       */
      public Builder clearForceMatchForEachRow() {
        bitField0_ = (bitField0_ & ~0x00000010);
        forceMatchForEachRow_ = false;
        onChanged();
        return this;
      }

      private boolean useMatmulGather_ ;
      /**
       * <pre>
       * Force constructed match objects to use matrix multiplication based gather
       * instead of standard tf.gather
       * </pre>
       *
       * <code>optional bool use_matmul_gather = 6 [default = false];</code>
       */
      public boolean hasUseMatmulGather() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * Force constructed match objects to use matrix multiplication based gather
       * instead of standard tf.gather
       * </pre>
       *
       * <code>optional bool use_matmul_gather = 6 [default = false];</code>
       */
      public boolean getUseMatmulGather() {
        return useMatmulGather_;
      }
      /**
       * <pre>
       * Force constructed match objects to use matrix multiplication based gather
       * instead of standard tf.gather
       * </pre>
       *
       * <code>optional bool use_matmul_gather = 6 [default = false];</code>
       */
      public Builder setUseMatmulGather(boolean value) {
        bitField0_ |= 0x00000020;
        useMatmulGather_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Force constructed match objects to use matrix multiplication based gather
       * instead of standard tf.gather
       * </pre>
       *
       * <code>optional bool use_matmul_gather = 6 [default = false];</code>
       */
      public Builder clearUseMatmulGather() {
        bitField0_ = (bitField0_ & ~0x00000020);
        useMatmulGather_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:object_detection.protos.ArgMaxMatcher)
    }

    // @@protoc_insertion_point(class_scope:object_detection.protos.ArgMaxMatcher)
    private static final object_detection.protos.ArgmaxMatcher.ArgMaxMatcher DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new object_detection.protos.ArgmaxMatcher.ArgMaxMatcher();
    }

    public static object_detection.protos.ArgmaxMatcher.ArgMaxMatcher getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ArgMaxMatcher>
        PARSER = new com.google.protobuf.AbstractParser<ArgMaxMatcher>() {
      @java.lang.Override
      public ArgMaxMatcher parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ArgMaxMatcher(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ArgMaxMatcher> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ArgMaxMatcher> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public object_detection.protos.ArgmaxMatcher.ArgMaxMatcher getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_object_detection_protos_ArgMaxMatcher_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_object_detection_protos_ArgMaxMatcher_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n,object_detection/protos/argmax_matcher" +
      ".proto\022\027object_detection.protos\"\354\001\n\rArgM" +
      "axMatcher\022\036\n\021matched_threshold\030\001 \001(\002:\0030." +
      "5\022 \n\023unmatched_threshold\030\002 \001(\002:\0030.5\022 \n\021i" +
      "gnore_thresholds\030\003 \001(\010:\005false\022,\n\036negativ" +
      "es_lower_than_unmatched\030\004 \001(\010:\004true\022\'\n\030f" +
      "orce_match_for_each_row\030\005 \001(\010:\005false\022 \n\021" +
      "use_matmul_gather\030\006 \001(\010:\005false"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_object_detection_protos_ArgMaxMatcher_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_object_detection_protos_ArgMaxMatcher_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_object_detection_protos_ArgMaxMatcher_descriptor,
        new java.lang.String[] { "MatchedThreshold", "UnmatchedThreshold", "IgnoreThresholds", "NegativesLowerThanUnmatched", "ForceMatchForEachRow", "UseMatmulGather", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
