// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/eval.proto

package object_detection.protos;

public final class Eval {
  private Eval() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EvalConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:object_detection.protos.EvalConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Number of visualization images to generate.
     * </pre>
     *
     * <code>optional uint32 num_visualizations = 1 [default = 10];</code>
     */
    boolean hasNumVisualizations();
    /**
     * <pre>
     * Number of visualization images to generate.
     * </pre>
     *
     * <code>optional uint32 num_visualizations = 1 [default = 10];</code>
     */
    int getNumVisualizations();

    /**
     * <pre>
     * Number of examples to process of evaluation.
     * </pre>
     *
     * <code>optional uint32 num_examples = 2 [default = 5000];</code>
     */
    boolean hasNumExamples();
    /**
     * <pre>
     * Number of examples to process of evaluation.
     * </pre>
     *
     * <code>optional uint32 num_examples = 2 [default = 5000];</code>
     */
    int getNumExamples();

    /**
     * <pre>
     * How often to run evaluation.
     * </pre>
     *
     * <code>optional uint32 eval_interval_secs = 3 [default = 300];</code>
     */
    boolean hasEvalIntervalSecs();
    /**
     * <pre>
     * How often to run evaluation.
     * </pre>
     *
     * <code>optional uint32 eval_interval_secs = 3 [default = 300];</code>
     */
    int getEvalIntervalSecs();

    /**
     * <pre>
     * Maximum number of times to run evaluation. If set to 0, will run forever.
     * </pre>
     *
     * <code>optional uint32 max_evals = 4 [default = 0];</code>
     */
    boolean hasMaxEvals();
    /**
     * <pre>
     * Maximum number of times to run evaluation. If set to 0, will run forever.
     * </pre>
     *
     * <code>optional uint32 max_evals = 4 [default = 0];</code>
     */
    int getMaxEvals();

    /**
     * <pre>
     * Whether the TensorFlow graph used for evaluation should be saved to disk.
     * </pre>
     *
     * <code>optional bool save_graph = 5 [default = false];</code>
     */
    boolean hasSaveGraph();
    /**
     * <pre>
     * Whether the TensorFlow graph used for evaluation should be saved to disk.
     * </pre>
     *
     * <code>optional bool save_graph = 5 [default = false];</code>
     */
    boolean getSaveGraph();

    /**
     * <pre>
     * Path to directory to store visualizations in. If empty, visualization
     * images are not exported (only shown on Tensorboard).
     * </pre>
     *
     * <code>optional string visualization_export_dir = 6 [default = ""];</code>
     */
    boolean hasVisualizationExportDir();
    /**
     * <pre>
     * Path to directory to store visualizations in. If empty, visualization
     * images are not exported (only shown on Tensorboard).
     * </pre>
     *
     * <code>optional string visualization_export_dir = 6 [default = ""];</code>
     */
    java.lang.String getVisualizationExportDir();
    /**
     * <pre>
     * Path to directory to store visualizations in. If empty, visualization
     * images are not exported (only shown on Tensorboard).
     * </pre>
     *
     * <code>optional string visualization_export_dir = 6 [default = ""];</code>
     */
    com.google.protobuf.ByteString
        getVisualizationExportDirBytes();

    /**
     * <pre>
     * BNS name of the TensorFlow master.
     * </pre>
     *
     * <code>optional string eval_master = 7 [default = ""];</code>
     */
    boolean hasEvalMaster();
    /**
     * <pre>
     * BNS name of the TensorFlow master.
     * </pre>
     *
     * <code>optional string eval_master = 7 [default = ""];</code>
     */
    java.lang.String getEvalMaster();
    /**
     * <pre>
     * BNS name of the TensorFlow master.
     * </pre>
     *
     * <code>optional string eval_master = 7 [default = ""];</code>
     */
    com.google.protobuf.ByteString
        getEvalMasterBytes();

    /**
     * <pre>
     * Type of metrics to use for evaluation.
     * </pre>
     *
     * <code>repeated string metrics_set = 8;</code>
     */
    java.util.List<java.lang.String>
        getMetricsSetList();
    /**
     * <pre>
     * Type of metrics to use for evaluation.
     * </pre>
     *
     * <code>repeated string metrics_set = 8;</code>
     */
    int getMetricsSetCount();
    /**
     * <pre>
     * Type of metrics to use for evaluation.
     * </pre>
     *
     * <code>repeated string metrics_set = 8;</code>
     */
    java.lang.String getMetricsSet(int index);
    /**
     * <pre>
     * Type of metrics to use for evaluation.
     * </pre>
     *
     * <code>repeated string metrics_set = 8;</code>
     */
    com.google.protobuf.ByteString
        getMetricsSetBytes(int index);

    /**
     * <pre>
     * Path to export detections to COCO compatible JSON format.
     * </pre>
     *
     * <code>optional string export_path = 9 [default = ""];</code>
     */
    boolean hasExportPath();
    /**
     * <pre>
     * Path to export detections to COCO compatible JSON format.
     * </pre>
     *
     * <code>optional string export_path = 9 [default = ""];</code>
     */
    java.lang.String getExportPath();
    /**
     * <pre>
     * Path to export detections to COCO compatible JSON format.
     * </pre>
     *
     * <code>optional string export_path = 9 [default = ""];</code>
     */
    com.google.protobuf.ByteString
        getExportPathBytes();

    /**
     * <pre>
     * Option to not read groundtruth labels and only export detections to
     * COCO-compatible JSON file.
     * </pre>
     *
     * <code>optional bool ignore_groundtruth = 10 [default = false];</code>
     */
    boolean hasIgnoreGroundtruth();
    /**
     * <pre>
     * Option to not read groundtruth labels and only export detections to
     * COCO-compatible JSON file.
     * </pre>
     *
     * <code>optional bool ignore_groundtruth = 10 [default = false];</code>
     */
    boolean getIgnoreGroundtruth();

    /**
     * <pre>
     * Use exponential moving averages of variables for evaluation.
     * TODO(rathodv): When this is false make sure the model is constructed
     * without moving averages in restore_fn.
     * </pre>
     *
     * <code>optional bool use_moving_averages = 11 [default = false];</code>
     */
    boolean hasUseMovingAverages();
    /**
     * <pre>
     * Use exponential moving averages of variables for evaluation.
     * TODO(rathodv): When this is false make sure the model is constructed
     * without moving averages in restore_fn.
     * </pre>
     *
     * <code>optional bool use_moving_averages = 11 [default = false];</code>
     */
    boolean getUseMovingAverages();

    /**
     * <pre>
     * Whether to evaluate instance masks.
     * Note that since there is no evaluation code currently for instance
     * segmenation this option is unused.
     * </pre>
     *
     * <code>optional bool eval_instance_masks = 12 [default = false];</code>
     */
    boolean hasEvalInstanceMasks();
    /**
     * <pre>
     * Whether to evaluate instance masks.
     * Note that since there is no evaluation code currently for instance
     * segmenation this option is unused.
     * </pre>
     *
     * <code>optional bool eval_instance_masks = 12 [default = false];</code>
     */
    boolean getEvalInstanceMasks();

    /**
     * <pre>
     * Minimum score threshold for a detected object box to be visualized
     * </pre>
     *
     * <code>optional float min_score_threshold = 13 [default = 0.5];</code>
     */
    boolean hasMinScoreThreshold();
    /**
     * <pre>
     * Minimum score threshold for a detected object box to be visualized
     * </pre>
     *
     * <code>optional float min_score_threshold = 13 [default = 0.5];</code>
     */
    float getMinScoreThreshold();

    /**
     * <pre>
     * Maximum number of detections to visualize
     * </pre>
     *
     * <code>optional int32 max_num_boxes_to_visualize = 14 [default = 20];</code>
     */
    boolean hasMaxNumBoxesToVisualize();
    /**
     * <pre>
     * Maximum number of detections to visualize
     * </pre>
     *
     * <code>optional int32 max_num_boxes_to_visualize = 14 [default = 20];</code>
     */
    int getMaxNumBoxesToVisualize();

    /**
     * <pre>
     * When drawing a single detection, each label is by default visualized as
     * &lt;label name&gt; : &lt;label score&gt;. One can skip the name or/and score using the
     * following fields:
     * </pre>
     *
     * <code>optional bool skip_scores = 15 [default = false];</code>
     */
    boolean hasSkipScores();
    /**
     * <pre>
     * When drawing a single detection, each label is by default visualized as
     * &lt;label name&gt; : &lt;label score&gt;. One can skip the name or/and score using the
     * following fields:
     * </pre>
     *
     * <code>optional bool skip_scores = 15 [default = false];</code>
     */
    boolean getSkipScores();

    /**
     * <code>optional bool skip_labels = 16 [default = false];</code>
     */
    boolean hasSkipLabels();
    /**
     * <code>optional bool skip_labels = 16 [default = false];</code>
     */
    boolean getSkipLabels();

    /**
     * <pre>
     * Whether to show groundtruth boxes in addition to detected boxes in
     * visualizations.
     * </pre>
     *
     * <code>optional bool visualize_groundtruth_boxes = 17 [default = false];</code>
     */
    boolean hasVisualizeGroundtruthBoxes();
    /**
     * <pre>
     * Whether to show groundtruth boxes in addition to detected boxes in
     * visualizations.
     * </pre>
     *
     * <code>optional bool visualize_groundtruth_boxes = 17 [default = false];</code>
     */
    boolean getVisualizeGroundtruthBoxes();

    /**
     * <pre>
     * Box color for visualizing groundtruth boxes.
     * </pre>
     *
     * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
     */
    boolean hasGroundtruthBoxVisualizationColor();
    /**
     * <pre>
     * Box color for visualizing groundtruth boxes.
     * </pre>
     *
     * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
     */
    java.lang.String getGroundtruthBoxVisualizationColor();
    /**
     * <pre>
     * Box color for visualizing groundtruth boxes.
     * </pre>
     *
     * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
     */
    com.google.protobuf.ByteString
        getGroundtruthBoxVisualizationColorBytes();

    /**
     * <pre>
     * Whether to keep image identifier in filename when exported to
     * visualization_export_dir.
     * </pre>
     *
     * <code>optional bool keep_image_id_for_visualization_export = 19 [default = false];</code>
     */
    boolean hasKeepImageIdForVisualizationExport();
    /**
     * <pre>
     * Whether to keep image identifier in filename when exported to
     * visualization_export_dir.
     * </pre>
     *
     * <code>optional bool keep_image_id_for_visualization_export = 19 [default = false];</code>
     */
    boolean getKeepImageIdForVisualizationExport();

    /**
     * <pre>
     * Whether to retain original images (i.e. not pre-processed) in the tensor
     * dictionary, so that they can be displayed in Tensorboard.
     * </pre>
     *
     * <code>optional bool retain_original_images = 23 [default = true];</code>
     */
    boolean hasRetainOriginalImages();
    /**
     * <pre>
     * Whether to retain original images (i.e. not pre-processed) in the tensor
     * dictionary, so that they can be displayed in Tensorboard.
     * </pre>
     *
     * <code>optional bool retain_original_images = 23 [default = true];</code>
     */
    boolean getRetainOriginalImages();

    /**
     * <pre>
     * If True, additionally include per-category metrics.
     * </pre>
     *
     * <code>optional bool include_metrics_per_category = 24 [default = false];</code>
     */
    boolean hasIncludeMetricsPerCategory();
    /**
     * <pre>
     * If True, additionally include per-category metrics.
     * </pre>
     *
     * <code>optional bool include_metrics_per_category = 24 [default = false];</code>
     */
    boolean getIncludeMetricsPerCategory();
  }
  /**
   * <pre>
   * Message for configuring DetectionModel evaluation jobs (eval.py).
   * </pre>
   *
   * Protobuf type {@code object_detection.protos.EvalConfig}
   */
  public  static final class EvalConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:object_detection.protos.EvalConfig)
      EvalConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EvalConfig.newBuilder() to construct.
    private EvalConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EvalConfig() {
      numVisualizations_ = 10;
      numExamples_ = 5000;
      evalIntervalSecs_ = 300;
      maxEvals_ = 0;
      saveGraph_ = false;
      visualizationExportDir_ = "";
      evalMaster_ = "";
      metricsSet_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      exportPath_ = "";
      ignoreGroundtruth_ = false;
      useMovingAverages_ = false;
      evalInstanceMasks_ = false;
      minScoreThreshold_ = 0.5F;
      maxNumBoxesToVisualize_ = 20;
      skipScores_ = false;
      skipLabels_ = false;
      visualizeGroundtruthBoxes_ = false;
      groundtruthBoxVisualizationColor_ = "black";
      keepImageIdForVisualizationExport_ = false;
      retainOriginalImages_ = true;
      includeMetricsPerCategory_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EvalConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              numVisualizations_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              numExamples_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              evalIntervalSecs_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              maxEvals_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              saveGraph_ = input.readBool();
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              visualizationExportDir_ = bs;
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              evalMaster_ = bs;
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                metricsSet_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000080;
              }
              metricsSet_.add(bs);
              break;
            }
            case 74: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              exportPath_ = bs;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              ignoreGroundtruth_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              useMovingAverages_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000400;
              evalInstanceMasks_ = input.readBool();
              break;
            }
            case 109: {
              bitField0_ |= 0x00000800;
              minScoreThreshold_ = input.readFloat();
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              maxNumBoxesToVisualize_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00002000;
              skipScores_ = input.readBool();
              break;
            }
            case 128: {
              bitField0_ |= 0x00004000;
              skipLabels_ = input.readBool();
              break;
            }
            case 136: {
              bitField0_ |= 0x00008000;
              visualizeGroundtruthBoxes_ = input.readBool();
              break;
            }
            case 146: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00010000;
              groundtruthBoxVisualizationColor_ = bs;
              break;
            }
            case 152: {
              bitField0_ |= 0x00020000;
              keepImageIdForVisualizationExport_ = input.readBool();
              break;
            }
            case 184: {
              bitField0_ |= 0x00040000;
              retainOriginalImages_ = input.readBool();
              break;
            }
            case 192: {
              bitField0_ |= 0x00080000;
              includeMetricsPerCategory_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          metricsSet_ = metricsSet_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return object_detection.protos.Eval.internal_static_object_detection_protos_EvalConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return object_detection.protos.Eval.internal_static_object_detection_protos_EvalConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              object_detection.protos.Eval.EvalConfig.class, object_detection.protos.Eval.EvalConfig.Builder.class);
    }

    private int bitField0_;
    public static final int NUM_VISUALIZATIONS_FIELD_NUMBER = 1;
    private int numVisualizations_;
    /**
     * <pre>
     * Number of visualization images to generate.
     * </pre>
     *
     * <code>optional uint32 num_visualizations = 1 [default = 10];</code>
     */
    public boolean hasNumVisualizations() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Number of visualization images to generate.
     * </pre>
     *
     * <code>optional uint32 num_visualizations = 1 [default = 10];</code>
     */
    public int getNumVisualizations() {
      return numVisualizations_;
    }

    public static final int NUM_EXAMPLES_FIELD_NUMBER = 2;
    private int numExamples_;
    /**
     * <pre>
     * Number of examples to process of evaluation.
     * </pre>
     *
     * <code>optional uint32 num_examples = 2 [default = 5000];</code>
     */
    public boolean hasNumExamples() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Number of examples to process of evaluation.
     * </pre>
     *
     * <code>optional uint32 num_examples = 2 [default = 5000];</code>
     */
    public int getNumExamples() {
      return numExamples_;
    }

    public static final int EVAL_INTERVAL_SECS_FIELD_NUMBER = 3;
    private int evalIntervalSecs_;
    /**
     * <pre>
     * How often to run evaluation.
     * </pre>
     *
     * <code>optional uint32 eval_interval_secs = 3 [default = 300];</code>
     */
    public boolean hasEvalIntervalSecs() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * How often to run evaluation.
     * </pre>
     *
     * <code>optional uint32 eval_interval_secs = 3 [default = 300];</code>
     */
    public int getEvalIntervalSecs() {
      return evalIntervalSecs_;
    }

    public static final int MAX_EVALS_FIELD_NUMBER = 4;
    private int maxEvals_;
    /**
     * <pre>
     * Maximum number of times to run evaluation. If set to 0, will run forever.
     * </pre>
     *
     * <code>optional uint32 max_evals = 4 [default = 0];</code>
     */
    public boolean hasMaxEvals() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Maximum number of times to run evaluation. If set to 0, will run forever.
     * </pre>
     *
     * <code>optional uint32 max_evals = 4 [default = 0];</code>
     */
    public int getMaxEvals() {
      return maxEvals_;
    }

    public static final int SAVE_GRAPH_FIELD_NUMBER = 5;
    private boolean saveGraph_;
    /**
     * <pre>
     * Whether the TensorFlow graph used for evaluation should be saved to disk.
     * </pre>
     *
     * <code>optional bool save_graph = 5 [default = false];</code>
     */
    public boolean hasSaveGraph() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Whether the TensorFlow graph used for evaluation should be saved to disk.
     * </pre>
     *
     * <code>optional bool save_graph = 5 [default = false];</code>
     */
    public boolean getSaveGraph() {
      return saveGraph_;
    }

    public static final int VISUALIZATION_EXPORT_DIR_FIELD_NUMBER = 6;
    private volatile java.lang.Object visualizationExportDir_;
    /**
     * <pre>
     * Path to directory to store visualizations in. If empty, visualization
     * images are not exported (only shown on Tensorboard).
     * </pre>
     *
     * <code>optional string visualization_export_dir = 6 [default = ""];</code>
     */
    public boolean hasVisualizationExportDir() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * Path to directory to store visualizations in. If empty, visualization
     * images are not exported (only shown on Tensorboard).
     * </pre>
     *
     * <code>optional string visualization_export_dir = 6 [default = ""];</code>
     */
    public java.lang.String getVisualizationExportDir() {
      java.lang.Object ref = visualizationExportDir_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          visualizationExportDir_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Path to directory to store visualizations in. If empty, visualization
     * images are not exported (only shown on Tensorboard).
     * </pre>
     *
     * <code>optional string visualization_export_dir = 6 [default = ""];</code>
     */
    public com.google.protobuf.ByteString
        getVisualizationExportDirBytes() {
      java.lang.Object ref = visualizationExportDir_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        visualizationExportDir_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EVAL_MASTER_FIELD_NUMBER = 7;
    private volatile java.lang.Object evalMaster_;
    /**
     * <pre>
     * BNS name of the TensorFlow master.
     * </pre>
     *
     * <code>optional string eval_master = 7 [default = ""];</code>
     */
    public boolean hasEvalMaster() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * BNS name of the TensorFlow master.
     * </pre>
     *
     * <code>optional string eval_master = 7 [default = ""];</code>
     */
    public java.lang.String getEvalMaster() {
      java.lang.Object ref = evalMaster_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          evalMaster_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * BNS name of the TensorFlow master.
     * </pre>
     *
     * <code>optional string eval_master = 7 [default = ""];</code>
     */
    public com.google.protobuf.ByteString
        getEvalMasterBytes() {
      java.lang.Object ref = evalMaster_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        evalMaster_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int METRICS_SET_FIELD_NUMBER = 8;
    private com.google.protobuf.LazyStringList metricsSet_;
    /**
     * <pre>
     * Type of metrics to use for evaluation.
     * </pre>
     *
     * <code>repeated string metrics_set = 8;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getMetricsSetList() {
      return metricsSet_;
    }
    /**
     * <pre>
     * Type of metrics to use for evaluation.
     * </pre>
     *
     * <code>repeated string metrics_set = 8;</code>
     */
    public int getMetricsSetCount() {
      return metricsSet_.size();
    }
    /**
     * <pre>
     * Type of metrics to use for evaluation.
     * </pre>
     *
     * <code>repeated string metrics_set = 8;</code>
     */
    public java.lang.String getMetricsSet(int index) {
      return metricsSet_.get(index);
    }
    /**
     * <pre>
     * Type of metrics to use for evaluation.
     * </pre>
     *
     * <code>repeated string metrics_set = 8;</code>
     */
    public com.google.protobuf.ByteString
        getMetricsSetBytes(int index) {
      return metricsSet_.getByteString(index);
    }

    public static final int EXPORT_PATH_FIELD_NUMBER = 9;
    private volatile java.lang.Object exportPath_;
    /**
     * <pre>
     * Path to export detections to COCO compatible JSON format.
     * </pre>
     *
     * <code>optional string export_path = 9 [default = ""];</code>
     */
    public boolean hasExportPath() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * Path to export detections to COCO compatible JSON format.
     * </pre>
     *
     * <code>optional string export_path = 9 [default = ""];</code>
     */
    public java.lang.String getExportPath() {
      java.lang.Object ref = exportPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          exportPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Path to export detections to COCO compatible JSON format.
     * </pre>
     *
     * <code>optional string export_path = 9 [default = ""];</code>
     */
    public com.google.protobuf.ByteString
        getExportPathBytes() {
      java.lang.Object ref = exportPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        exportPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IGNORE_GROUNDTRUTH_FIELD_NUMBER = 10;
    private boolean ignoreGroundtruth_;
    /**
     * <pre>
     * Option to not read groundtruth labels and only export detections to
     * COCO-compatible JSON file.
     * </pre>
     *
     * <code>optional bool ignore_groundtruth = 10 [default = false];</code>
     */
    public boolean hasIgnoreGroundtruth() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * Option to not read groundtruth labels and only export detections to
     * COCO-compatible JSON file.
     * </pre>
     *
     * <code>optional bool ignore_groundtruth = 10 [default = false];</code>
     */
    public boolean getIgnoreGroundtruth() {
      return ignoreGroundtruth_;
    }

    public static final int USE_MOVING_AVERAGES_FIELD_NUMBER = 11;
    private boolean useMovingAverages_;
    /**
     * <pre>
     * Use exponential moving averages of variables for evaluation.
     * TODO(rathodv): When this is false make sure the model is constructed
     * without moving averages in restore_fn.
     * </pre>
     *
     * <code>optional bool use_moving_averages = 11 [default = false];</code>
     */
    public boolean hasUseMovingAverages() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * Use exponential moving averages of variables for evaluation.
     * TODO(rathodv): When this is false make sure the model is constructed
     * without moving averages in restore_fn.
     * </pre>
     *
     * <code>optional bool use_moving_averages = 11 [default = false];</code>
     */
    public boolean getUseMovingAverages() {
      return useMovingAverages_;
    }

    public static final int EVAL_INSTANCE_MASKS_FIELD_NUMBER = 12;
    private boolean evalInstanceMasks_;
    /**
     * <pre>
     * Whether to evaluate instance masks.
     * Note that since there is no evaluation code currently for instance
     * segmenation this option is unused.
     * </pre>
     *
     * <code>optional bool eval_instance_masks = 12 [default = false];</code>
     */
    public boolean hasEvalInstanceMasks() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * Whether to evaluate instance masks.
     * Note that since there is no evaluation code currently for instance
     * segmenation this option is unused.
     * </pre>
     *
     * <code>optional bool eval_instance_masks = 12 [default = false];</code>
     */
    public boolean getEvalInstanceMasks() {
      return evalInstanceMasks_;
    }

    public static final int MIN_SCORE_THRESHOLD_FIELD_NUMBER = 13;
    private float minScoreThreshold_;
    /**
     * <pre>
     * Minimum score threshold for a detected object box to be visualized
     * </pre>
     *
     * <code>optional float min_score_threshold = 13 [default = 0.5];</code>
     */
    public boolean hasMinScoreThreshold() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * Minimum score threshold for a detected object box to be visualized
     * </pre>
     *
     * <code>optional float min_score_threshold = 13 [default = 0.5];</code>
     */
    public float getMinScoreThreshold() {
      return minScoreThreshold_;
    }

    public static final int MAX_NUM_BOXES_TO_VISUALIZE_FIELD_NUMBER = 14;
    private int maxNumBoxesToVisualize_;
    /**
     * <pre>
     * Maximum number of detections to visualize
     * </pre>
     *
     * <code>optional int32 max_num_boxes_to_visualize = 14 [default = 20];</code>
     */
    public boolean hasMaxNumBoxesToVisualize() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * Maximum number of detections to visualize
     * </pre>
     *
     * <code>optional int32 max_num_boxes_to_visualize = 14 [default = 20];</code>
     */
    public int getMaxNumBoxesToVisualize() {
      return maxNumBoxesToVisualize_;
    }

    public static final int SKIP_SCORES_FIELD_NUMBER = 15;
    private boolean skipScores_;
    /**
     * <pre>
     * When drawing a single detection, each label is by default visualized as
     * &lt;label name&gt; : &lt;label score&gt;. One can skip the name or/and score using the
     * following fields:
     * </pre>
     *
     * <code>optional bool skip_scores = 15 [default = false];</code>
     */
    public boolean hasSkipScores() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * When drawing a single detection, each label is by default visualized as
     * &lt;label name&gt; : &lt;label score&gt;. One can skip the name or/and score using the
     * following fields:
     * </pre>
     *
     * <code>optional bool skip_scores = 15 [default = false];</code>
     */
    public boolean getSkipScores() {
      return skipScores_;
    }

    public static final int SKIP_LABELS_FIELD_NUMBER = 16;
    private boolean skipLabels_;
    /**
     * <code>optional bool skip_labels = 16 [default = false];</code>
     */
    public boolean hasSkipLabels() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional bool skip_labels = 16 [default = false];</code>
     */
    public boolean getSkipLabels() {
      return skipLabels_;
    }

    public static final int VISUALIZE_GROUNDTRUTH_BOXES_FIELD_NUMBER = 17;
    private boolean visualizeGroundtruthBoxes_;
    /**
     * <pre>
     * Whether to show groundtruth boxes in addition to detected boxes in
     * visualizations.
     * </pre>
     *
     * <code>optional bool visualize_groundtruth_boxes = 17 [default = false];</code>
     */
    public boolean hasVisualizeGroundtruthBoxes() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <pre>
     * Whether to show groundtruth boxes in addition to detected boxes in
     * visualizations.
     * </pre>
     *
     * <code>optional bool visualize_groundtruth_boxes = 17 [default = false];</code>
     */
    public boolean getVisualizeGroundtruthBoxes() {
      return visualizeGroundtruthBoxes_;
    }

    public static final int GROUNDTRUTH_BOX_VISUALIZATION_COLOR_FIELD_NUMBER = 18;
    private volatile java.lang.Object groundtruthBoxVisualizationColor_;
    /**
     * <pre>
     * Box color for visualizing groundtruth boxes.
     * </pre>
     *
     * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
     */
    public boolean hasGroundtruthBoxVisualizationColor() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     * Box color for visualizing groundtruth boxes.
     * </pre>
     *
     * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
     */
    public java.lang.String getGroundtruthBoxVisualizationColor() {
      java.lang.Object ref = groundtruthBoxVisualizationColor_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          groundtruthBoxVisualizationColor_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Box color for visualizing groundtruth boxes.
     * </pre>
     *
     * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
     */
    public com.google.protobuf.ByteString
        getGroundtruthBoxVisualizationColorBytes() {
      java.lang.Object ref = groundtruthBoxVisualizationColor_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        groundtruthBoxVisualizationColor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int KEEP_IMAGE_ID_FOR_VISUALIZATION_EXPORT_FIELD_NUMBER = 19;
    private boolean keepImageIdForVisualizationExport_;
    /**
     * <pre>
     * Whether to keep image identifier in filename when exported to
     * visualization_export_dir.
     * </pre>
     *
     * <code>optional bool keep_image_id_for_visualization_export = 19 [default = false];</code>
     */
    public boolean hasKeepImageIdForVisualizationExport() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <pre>
     * Whether to keep image identifier in filename when exported to
     * visualization_export_dir.
     * </pre>
     *
     * <code>optional bool keep_image_id_for_visualization_export = 19 [default = false];</code>
     */
    public boolean getKeepImageIdForVisualizationExport() {
      return keepImageIdForVisualizationExport_;
    }

    public static final int RETAIN_ORIGINAL_IMAGES_FIELD_NUMBER = 23;
    private boolean retainOriginalImages_;
    /**
     * <pre>
     * Whether to retain original images (i.e. not pre-processed) in the tensor
     * dictionary, so that they can be displayed in Tensorboard.
     * </pre>
     *
     * <code>optional bool retain_original_images = 23 [default = true];</code>
     */
    public boolean hasRetainOriginalImages() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <pre>
     * Whether to retain original images (i.e. not pre-processed) in the tensor
     * dictionary, so that they can be displayed in Tensorboard.
     * </pre>
     *
     * <code>optional bool retain_original_images = 23 [default = true];</code>
     */
    public boolean getRetainOriginalImages() {
      return retainOriginalImages_;
    }

    public static final int INCLUDE_METRICS_PER_CATEGORY_FIELD_NUMBER = 24;
    private boolean includeMetricsPerCategory_;
    /**
     * <pre>
     * If True, additionally include per-category metrics.
     * </pre>
     *
     * <code>optional bool include_metrics_per_category = 24 [default = false];</code>
     */
    public boolean hasIncludeMetricsPerCategory() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <pre>
     * If True, additionally include per-category metrics.
     * </pre>
     *
     * <code>optional bool include_metrics_per_category = 24 [default = false];</code>
     */
    public boolean getIncludeMetricsPerCategory() {
      return includeMetricsPerCategory_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, numVisualizations_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, numExamples_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, evalIntervalSecs_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, maxEvals_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, saveGraph_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, visualizationExportDir_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, evalMaster_);
      }
      for (int i = 0; i < metricsSet_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, metricsSet_.getRaw(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, exportPath_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(10, ignoreGroundtruth_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(11, useMovingAverages_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(12, evalInstanceMasks_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(13, minScoreThreshold_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(14, maxNumBoxesToVisualize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBool(15, skipScores_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBool(16, skipLabels_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBool(17, visualizeGroundtruthBoxes_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 18, groundtruthBoxVisualizationColor_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeBool(19, keepImageIdForVisualizationExport_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeBool(23, retainOriginalImages_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeBool(24, includeMetricsPerCategory_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, numVisualizations_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, numExamples_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, evalIntervalSecs_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, maxEvals_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, saveGraph_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, visualizationExportDir_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, evalMaster_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < metricsSet_.size(); i++) {
          dataSize += computeStringSizeNoTag(metricsSet_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getMetricsSetList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, exportPath_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, ignoreGroundtruth_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, useMovingAverages_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, evalInstanceMasks_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, minScoreThreshold_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, maxNumBoxesToVisualize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, skipScores_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, skipLabels_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, visualizeGroundtruthBoxes_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18, groundtruthBoxVisualizationColor_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, keepImageIdForVisualizationExport_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, retainOriginalImages_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(24, includeMetricsPerCategory_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof object_detection.protos.Eval.EvalConfig)) {
        return super.equals(obj);
      }
      object_detection.protos.Eval.EvalConfig other = (object_detection.protos.Eval.EvalConfig) obj;

      boolean result = true;
      result = result && (hasNumVisualizations() == other.hasNumVisualizations());
      if (hasNumVisualizations()) {
        result = result && (getNumVisualizations()
            == other.getNumVisualizations());
      }
      result = result && (hasNumExamples() == other.hasNumExamples());
      if (hasNumExamples()) {
        result = result && (getNumExamples()
            == other.getNumExamples());
      }
      result = result && (hasEvalIntervalSecs() == other.hasEvalIntervalSecs());
      if (hasEvalIntervalSecs()) {
        result = result && (getEvalIntervalSecs()
            == other.getEvalIntervalSecs());
      }
      result = result && (hasMaxEvals() == other.hasMaxEvals());
      if (hasMaxEvals()) {
        result = result && (getMaxEvals()
            == other.getMaxEvals());
      }
      result = result && (hasSaveGraph() == other.hasSaveGraph());
      if (hasSaveGraph()) {
        result = result && (getSaveGraph()
            == other.getSaveGraph());
      }
      result = result && (hasVisualizationExportDir() == other.hasVisualizationExportDir());
      if (hasVisualizationExportDir()) {
        result = result && getVisualizationExportDir()
            .equals(other.getVisualizationExportDir());
      }
      result = result && (hasEvalMaster() == other.hasEvalMaster());
      if (hasEvalMaster()) {
        result = result && getEvalMaster()
            .equals(other.getEvalMaster());
      }
      result = result && getMetricsSetList()
          .equals(other.getMetricsSetList());
      result = result && (hasExportPath() == other.hasExportPath());
      if (hasExportPath()) {
        result = result && getExportPath()
            .equals(other.getExportPath());
      }
      result = result && (hasIgnoreGroundtruth() == other.hasIgnoreGroundtruth());
      if (hasIgnoreGroundtruth()) {
        result = result && (getIgnoreGroundtruth()
            == other.getIgnoreGroundtruth());
      }
      result = result && (hasUseMovingAverages() == other.hasUseMovingAverages());
      if (hasUseMovingAverages()) {
        result = result && (getUseMovingAverages()
            == other.getUseMovingAverages());
      }
      result = result && (hasEvalInstanceMasks() == other.hasEvalInstanceMasks());
      if (hasEvalInstanceMasks()) {
        result = result && (getEvalInstanceMasks()
            == other.getEvalInstanceMasks());
      }
      result = result && (hasMinScoreThreshold() == other.hasMinScoreThreshold());
      if (hasMinScoreThreshold()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMinScoreThreshold())
            == java.lang.Float.floatToIntBits(
                other.getMinScoreThreshold()));
      }
      result = result && (hasMaxNumBoxesToVisualize() == other.hasMaxNumBoxesToVisualize());
      if (hasMaxNumBoxesToVisualize()) {
        result = result && (getMaxNumBoxesToVisualize()
            == other.getMaxNumBoxesToVisualize());
      }
      result = result && (hasSkipScores() == other.hasSkipScores());
      if (hasSkipScores()) {
        result = result && (getSkipScores()
            == other.getSkipScores());
      }
      result = result && (hasSkipLabels() == other.hasSkipLabels());
      if (hasSkipLabels()) {
        result = result && (getSkipLabels()
            == other.getSkipLabels());
      }
      result = result && (hasVisualizeGroundtruthBoxes() == other.hasVisualizeGroundtruthBoxes());
      if (hasVisualizeGroundtruthBoxes()) {
        result = result && (getVisualizeGroundtruthBoxes()
            == other.getVisualizeGroundtruthBoxes());
      }
      result = result && (hasGroundtruthBoxVisualizationColor() == other.hasGroundtruthBoxVisualizationColor());
      if (hasGroundtruthBoxVisualizationColor()) {
        result = result && getGroundtruthBoxVisualizationColor()
            .equals(other.getGroundtruthBoxVisualizationColor());
      }
      result = result && (hasKeepImageIdForVisualizationExport() == other.hasKeepImageIdForVisualizationExport());
      if (hasKeepImageIdForVisualizationExport()) {
        result = result && (getKeepImageIdForVisualizationExport()
            == other.getKeepImageIdForVisualizationExport());
      }
      result = result && (hasRetainOriginalImages() == other.hasRetainOriginalImages());
      if (hasRetainOriginalImages()) {
        result = result && (getRetainOriginalImages()
            == other.getRetainOriginalImages());
      }
      result = result && (hasIncludeMetricsPerCategory() == other.hasIncludeMetricsPerCategory());
      if (hasIncludeMetricsPerCategory()) {
        result = result && (getIncludeMetricsPerCategory()
            == other.getIncludeMetricsPerCategory());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNumVisualizations()) {
        hash = (37 * hash) + NUM_VISUALIZATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getNumVisualizations();
      }
      if (hasNumExamples()) {
        hash = (37 * hash) + NUM_EXAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getNumExamples();
      }
      if (hasEvalIntervalSecs()) {
        hash = (37 * hash) + EVAL_INTERVAL_SECS_FIELD_NUMBER;
        hash = (53 * hash) + getEvalIntervalSecs();
      }
      if (hasMaxEvals()) {
        hash = (37 * hash) + MAX_EVALS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxEvals();
      }
      if (hasSaveGraph()) {
        hash = (37 * hash) + SAVE_GRAPH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSaveGraph());
      }
      if (hasVisualizationExportDir()) {
        hash = (37 * hash) + VISUALIZATION_EXPORT_DIR_FIELD_NUMBER;
        hash = (53 * hash) + getVisualizationExportDir().hashCode();
      }
      if (hasEvalMaster()) {
        hash = (37 * hash) + EVAL_MASTER_FIELD_NUMBER;
        hash = (53 * hash) + getEvalMaster().hashCode();
      }
      if (getMetricsSetCount() > 0) {
        hash = (37 * hash) + METRICS_SET_FIELD_NUMBER;
        hash = (53 * hash) + getMetricsSetList().hashCode();
      }
      if (hasExportPath()) {
        hash = (37 * hash) + EXPORT_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getExportPath().hashCode();
      }
      if (hasIgnoreGroundtruth()) {
        hash = (37 * hash) + IGNORE_GROUNDTRUTH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIgnoreGroundtruth());
      }
      if (hasUseMovingAverages()) {
        hash = (37 * hash) + USE_MOVING_AVERAGES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUseMovingAverages());
      }
      if (hasEvalInstanceMasks()) {
        hash = (37 * hash) + EVAL_INSTANCE_MASKS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEvalInstanceMasks());
      }
      if (hasMinScoreThreshold()) {
        hash = (37 * hash) + MIN_SCORE_THRESHOLD_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinScoreThreshold());
      }
      if (hasMaxNumBoxesToVisualize()) {
        hash = (37 * hash) + MAX_NUM_BOXES_TO_VISUALIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxNumBoxesToVisualize();
      }
      if (hasSkipScores()) {
        hash = (37 * hash) + SKIP_SCORES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSkipScores());
      }
      if (hasSkipLabels()) {
        hash = (37 * hash) + SKIP_LABELS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSkipLabels());
      }
      if (hasVisualizeGroundtruthBoxes()) {
        hash = (37 * hash) + VISUALIZE_GROUNDTRUTH_BOXES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVisualizeGroundtruthBoxes());
      }
      if (hasGroundtruthBoxVisualizationColor()) {
        hash = (37 * hash) + GROUNDTRUTH_BOX_VISUALIZATION_COLOR_FIELD_NUMBER;
        hash = (53 * hash) + getGroundtruthBoxVisualizationColor().hashCode();
      }
      if (hasKeepImageIdForVisualizationExport()) {
        hash = (37 * hash) + KEEP_IMAGE_ID_FOR_VISUALIZATION_EXPORT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getKeepImageIdForVisualizationExport());
      }
      if (hasRetainOriginalImages()) {
        hash = (37 * hash) + RETAIN_ORIGINAL_IMAGES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getRetainOriginalImages());
      }
      if (hasIncludeMetricsPerCategory()) {
        hash = (37 * hash) + INCLUDE_METRICS_PER_CATEGORY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIncludeMetricsPerCategory());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static object_detection.protos.Eval.EvalConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.Eval.EvalConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.Eval.EvalConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.Eval.EvalConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.Eval.EvalConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.Eval.EvalConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.Eval.EvalConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.Eval.EvalConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.Eval.EvalConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static object_detection.protos.Eval.EvalConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.Eval.EvalConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.Eval.EvalConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(object_detection.protos.Eval.EvalConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message for configuring DetectionModel evaluation jobs (eval.py).
     * </pre>
     *
     * Protobuf type {@code object_detection.protos.EvalConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:object_detection.protos.EvalConfig)
        object_detection.protos.Eval.EvalConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return object_detection.protos.Eval.internal_static_object_detection_protos_EvalConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return object_detection.protos.Eval.internal_static_object_detection_protos_EvalConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                object_detection.protos.Eval.EvalConfig.class, object_detection.protos.Eval.EvalConfig.Builder.class);
      }

      // Construct using object_detection.protos.Eval.EvalConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        numVisualizations_ = 10;
        bitField0_ = (bitField0_ & ~0x00000001);
        numExamples_ = 5000;
        bitField0_ = (bitField0_ & ~0x00000002);
        evalIntervalSecs_ = 300;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxEvals_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        saveGraph_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        visualizationExportDir_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        evalMaster_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        metricsSet_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        exportPath_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        ignoreGroundtruth_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        useMovingAverages_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        evalInstanceMasks_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        minScoreThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00001000);
        maxNumBoxesToVisualize_ = 20;
        bitField0_ = (bitField0_ & ~0x00002000);
        skipScores_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        skipLabels_ = false;
        bitField0_ = (bitField0_ & ~0x00008000);
        visualizeGroundtruthBoxes_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        groundtruthBoxVisualizationColor_ = "black";
        bitField0_ = (bitField0_ & ~0x00020000);
        keepImageIdForVisualizationExport_ = false;
        bitField0_ = (bitField0_ & ~0x00040000);
        retainOriginalImages_ = true;
        bitField0_ = (bitField0_ & ~0x00080000);
        includeMetricsPerCategory_ = false;
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return object_detection.protos.Eval.internal_static_object_detection_protos_EvalConfig_descriptor;
      }

      @java.lang.Override
      public object_detection.protos.Eval.EvalConfig getDefaultInstanceForType() {
        return object_detection.protos.Eval.EvalConfig.getDefaultInstance();
      }

      @java.lang.Override
      public object_detection.protos.Eval.EvalConfig build() {
        object_detection.protos.Eval.EvalConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public object_detection.protos.Eval.EvalConfig buildPartial() {
        object_detection.protos.Eval.EvalConfig result = new object_detection.protos.Eval.EvalConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numVisualizations_ = numVisualizations_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.numExamples_ = numExamples_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.evalIntervalSecs_ = evalIntervalSecs_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxEvals_ = maxEvals_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.saveGraph_ = saveGraph_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.visualizationExportDir_ = visualizationExportDir_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.evalMaster_ = evalMaster_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          metricsSet_ = metricsSet_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.metricsSet_ = metricsSet_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.exportPath_ = exportPath_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.ignoreGroundtruth_ = ignoreGroundtruth_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.useMovingAverages_ = useMovingAverages_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.evalInstanceMasks_ = evalInstanceMasks_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.minScoreThreshold_ = minScoreThreshold_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.maxNumBoxesToVisualize_ = maxNumBoxesToVisualize_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.skipScores_ = skipScores_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.skipLabels_ = skipLabels_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.visualizeGroundtruthBoxes_ = visualizeGroundtruthBoxes_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.groundtruthBoxVisualizationColor_ = groundtruthBoxVisualizationColor_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.keepImageIdForVisualizationExport_ = keepImageIdForVisualizationExport_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.retainOriginalImages_ = retainOriginalImages_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.includeMetricsPerCategory_ = includeMetricsPerCategory_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof object_detection.protos.Eval.EvalConfig) {
          return mergeFrom((object_detection.protos.Eval.EvalConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(object_detection.protos.Eval.EvalConfig other) {
        if (other == object_detection.protos.Eval.EvalConfig.getDefaultInstance()) return this;
        if (other.hasNumVisualizations()) {
          setNumVisualizations(other.getNumVisualizations());
        }
        if (other.hasNumExamples()) {
          setNumExamples(other.getNumExamples());
        }
        if (other.hasEvalIntervalSecs()) {
          setEvalIntervalSecs(other.getEvalIntervalSecs());
        }
        if (other.hasMaxEvals()) {
          setMaxEvals(other.getMaxEvals());
        }
        if (other.hasSaveGraph()) {
          setSaveGraph(other.getSaveGraph());
        }
        if (other.hasVisualizationExportDir()) {
          bitField0_ |= 0x00000020;
          visualizationExportDir_ = other.visualizationExportDir_;
          onChanged();
        }
        if (other.hasEvalMaster()) {
          bitField0_ |= 0x00000040;
          evalMaster_ = other.evalMaster_;
          onChanged();
        }
        if (!other.metricsSet_.isEmpty()) {
          if (metricsSet_.isEmpty()) {
            metricsSet_ = other.metricsSet_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureMetricsSetIsMutable();
            metricsSet_.addAll(other.metricsSet_);
          }
          onChanged();
        }
        if (other.hasExportPath()) {
          bitField0_ |= 0x00000100;
          exportPath_ = other.exportPath_;
          onChanged();
        }
        if (other.hasIgnoreGroundtruth()) {
          setIgnoreGroundtruth(other.getIgnoreGroundtruth());
        }
        if (other.hasUseMovingAverages()) {
          setUseMovingAverages(other.getUseMovingAverages());
        }
        if (other.hasEvalInstanceMasks()) {
          setEvalInstanceMasks(other.getEvalInstanceMasks());
        }
        if (other.hasMinScoreThreshold()) {
          setMinScoreThreshold(other.getMinScoreThreshold());
        }
        if (other.hasMaxNumBoxesToVisualize()) {
          setMaxNumBoxesToVisualize(other.getMaxNumBoxesToVisualize());
        }
        if (other.hasSkipScores()) {
          setSkipScores(other.getSkipScores());
        }
        if (other.hasSkipLabels()) {
          setSkipLabels(other.getSkipLabels());
        }
        if (other.hasVisualizeGroundtruthBoxes()) {
          setVisualizeGroundtruthBoxes(other.getVisualizeGroundtruthBoxes());
        }
        if (other.hasGroundtruthBoxVisualizationColor()) {
          bitField0_ |= 0x00020000;
          groundtruthBoxVisualizationColor_ = other.groundtruthBoxVisualizationColor_;
          onChanged();
        }
        if (other.hasKeepImageIdForVisualizationExport()) {
          setKeepImageIdForVisualizationExport(other.getKeepImageIdForVisualizationExport());
        }
        if (other.hasRetainOriginalImages()) {
          setRetainOriginalImages(other.getRetainOriginalImages());
        }
        if (other.hasIncludeMetricsPerCategory()) {
          setIncludeMetricsPerCategory(other.getIncludeMetricsPerCategory());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        object_detection.protos.Eval.EvalConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (object_detection.protos.Eval.EvalConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int numVisualizations_ = 10;
      /**
       * <pre>
       * Number of visualization images to generate.
       * </pre>
       *
       * <code>optional uint32 num_visualizations = 1 [default = 10];</code>
       */
      public boolean hasNumVisualizations() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Number of visualization images to generate.
       * </pre>
       *
       * <code>optional uint32 num_visualizations = 1 [default = 10];</code>
       */
      public int getNumVisualizations() {
        return numVisualizations_;
      }
      /**
       * <pre>
       * Number of visualization images to generate.
       * </pre>
       *
       * <code>optional uint32 num_visualizations = 1 [default = 10];</code>
       */
      public Builder setNumVisualizations(int value) {
        bitField0_ |= 0x00000001;
        numVisualizations_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of visualization images to generate.
       * </pre>
       *
       * <code>optional uint32 num_visualizations = 1 [default = 10];</code>
       */
      public Builder clearNumVisualizations() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numVisualizations_ = 10;
        onChanged();
        return this;
      }

      private int numExamples_ = 5000;
      /**
       * <pre>
       * Number of examples to process of evaluation.
       * </pre>
       *
       * <code>optional uint32 num_examples = 2 [default = 5000];</code>
       */
      public boolean hasNumExamples() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Number of examples to process of evaluation.
       * </pre>
       *
       * <code>optional uint32 num_examples = 2 [default = 5000];</code>
       */
      public int getNumExamples() {
        return numExamples_;
      }
      /**
       * <pre>
       * Number of examples to process of evaluation.
       * </pre>
       *
       * <code>optional uint32 num_examples = 2 [default = 5000];</code>
       */
      public Builder setNumExamples(int value) {
        bitField0_ |= 0x00000002;
        numExamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of examples to process of evaluation.
       * </pre>
       *
       * <code>optional uint32 num_examples = 2 [default = 5000];</code>
       */
      public Builder clearNumExamples() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numExamples_ = 5000;
        onChanged();
        return this;
      }

      private int evalIntervalSecs_ = 300;
      /**
       * <pre>
       * How often to run evaluation.
       * </pre>
       *
       * <code>optional uint32 eval_interval_secs = 3 [default = 300];</code>
       */
      public boolean hasEvalIntervalSecs() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * How often to run evaluation.
       * </pre>
       *
       * <code>optional uint32 eval_interval_secs = 3 [default = 300];</code>
       */
      public int getEvalIntervalSecs() {
        return evalIntervalSecs_;
      }
      /**
       * <pre>
       * How often to run evaluation.
       * </pre>
       *
       * <code>optional uint32 eval_interval_secs = 3 [default = 300];</code>
       */
      public Builder setEvalIntervalSecs(int value) {
        bitField0_ |= 0x00000004;
        evalIntervalSecs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * How often to run evaluation.
       * </pre>
       *
       * <code>optional uint32 eval_interval_secs = 3 [default = 300];</code>
       */
      public Builder clearEvalIntervalSecs() {
        bitField0_ = (bitField0_ & ~0x00000004);
        evalIntervalSecs_ = 300;
        onChanged();
        return this;
      }

      private int maxEvals_ ;
      /**
       * <pre>
       * Maximum number of times to run evaluation. If set to 0, will run forever.
       * </pre>
       *
       * <code>optional uint32 max_evals = 4 [default = 0];</code>
       */
      public boolean hasMaxEvals() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Maximum number of times to run evaluation. If set to 0, will run forever.
       * </pre>
       *
       * <code>optional uint32 max_evals = 4 [default = 0];</code>
       */
      public int getMaxEvals() {
        return maxEvals_;
      }
      /**
       * <pre>
       * Maximum number of times to run evaluation. If set to 0, will run forever.
       * </pre>
       *
       * <code>optional uint32 max_evals = 4 [default = 0];</code>
       */
      public Builder setMaxEvals(int value) {
        bitField0_ |= 0x00000008;
        maxEvals_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum number of times to run evaluation. If set to 0, will run forever.
       * </pre>
       *
       * <code>optional uint32 max_evals = 4 [default = 0];</code>
       */
      public Builder clearMaxEvals() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxEvals_ = 0;
        onChanged();
        return this;
      }

      private boolean saveGraph_ ;
      /**
       * <pre>
       * Whether the TensorFlow graph used for evaluation should be saved to disk.
       * </pre>
       *
       * <code>optional bool save_graph = 5 [default = false];</code>
       */
      public boolean hasSaveGraph() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Whether the TensorFlow graph used for evaluation should be saved to disk.
       * </pre>
       *
       * <code>optional bool save_graph = 5 [default = false];</code>
       */
      public boolean getSaveGraph() {
        return saveGraph_;
      }
      /**
       * <pre>
       * Whether the TensorFlow graph used for evaluation should be saved to disk.
       * </pre>
       *
       * <code>optional bool save_graph = 5 [default = false];</code>
       */
      public Builder setSaveGraph(boolean value) {
        bitField0_ |= 0x00000010;
        saveGraph_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether the TensorFlow graph used for evaluation should be saved to disk.
       * </pre>
       *
       * <code>optional bool save_graph = 5 [default = false];</code>
       */
      public Builder clearSaveGraph() {
        bitField0_ = (bitField0_ & ~0x00000010);
        saveGraph_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object visualizationExportDir_ = "";
      /**
       * <pre>
       * Path to directory to store visualizations in. If empty, visualization
       * images are not exported (only shown on Tensorboard).
       * </pre>
       *
       * <code>optional string visualization_export_dir = 6 [default = ""];</code>
       */
      public boolean hasVisualizationExportDir() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * Path to directory to store visualizations in. If empty, visualization
       * images are not exported (only shown on Tensorboard).
       * </pre>
       *
       * <code>optional string visualization_export_dir = 6 [default = ""];</code>
       */
      public java.lang.String getVisualizationExportDir() {
        java.lang.Object ref = visualizationExportDir_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            visualizationExportDir_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Path to directory to store visualizations in. If empty, visualization
       * images are not exported (only shown on Tensorboard).
       * </pre>
       *
       * <code>optional string visualization_export_dir = 6 [default = ""];</code>
       */
      public com.google.protobuf.ByteString
          getVisualizationExportDirBytes() {
        java.lang.Object ref = visualizationExportDir_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          visualizationExportDir_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Path to directory to store visualizations in. If empty, visualization
       * images are not exported (only shown on Tensorboard).
       * </pre>
       *
       * <code>optional string visualization_export_dir = 6 [default = ""];</code>
       */
      public Builder setVisualizationExportDir(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        visualizationExportDir_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directory to store visualizations in. If empty, visualization
       * images are not exported (only shown on Tensorboard).
       * </pre>
       *
       * <code>optional string visualization_export_dir = 6 [default = ""];</code>
       */
      public Builder clearVisualizationExportDir() {
        bitField0_ = (bitField0_ & ~0x00000020);
        visualizationExportDir_ = getDefaultInstance().getVisualizationExportDir();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directory to store visualizations in. If empty, visualization
       * images are not exported (only shown on Tensorboard).
       * </pre>
       *
       * <code>optional string visualization_export_dir = 6 [default = ""];</code>
       */
      public Builder setVisualizationExportDirBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        visualizationExportDir_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object evalMaster_ = "";
      /**
       * <pre>
       * BNS name of the TensorFlow master.
       * </pre>
       *
       * <code>optional string eval_master = 7 [default = ""];</code>
       */
      public boolean hasEvalMaster() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * BNS name of the TensorFlow master.
       * </pre>
       *
       * <code>optional string eval_master = 7 [default = ""];</code>
       */
      public java.lang.String getEvalMaster() {
        java.lang.Object ref = evalMaster_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            evalMaster_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * BNS name of the TensorFlow master.
       * </pre>
       *
       * <code>optional string eval_master = 7 [default = ""];</code>
       */
      public com.google.protobuf.ByteString
          getEvalMasterBytes() {
        java.lang.Object ref = evalMaster_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          evalMaster_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * BNS name of the TensorFlow master.
       * </pre>
       *
       * <code>optional string eval_master = 7 [default = ""];</code>
       */
      public Builder setEvalMaster(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        evalMaster_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BNS name of the TensorFlow master.
       * </pre>
       *
       * <code>optional string eval_master = 7 [default = ""];</code>
       */
      public Builder clearEvalMaster() {
        bitField0_ = (bitField0_ & ~0x00000040);
        evalMaster_ = getDefaultInstance().getEvalMaster();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BNS name of the TensorFlow master.
       * </pre>
       *
       * <code>optional string eval_master = 7 [default = ""];</code>
       */
      public Builder setEvalMasterBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        evalMaster_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList metricsSet_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureMetricsSetIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          metricsSet_ = new com.google.protobuf.LazyStringArrayList(metricsSet_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       * Type of metrics to use for evaluation.
       * </pre>
       *
       * <code>repeated string metrics_set = 8;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getMetricsSetList() {
        return metricsSet_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Type of metrics to use for evaluation.
       * </pre>
       *
       * <code>repeated string metrics_set = 8;</code>
       */
      public int getMetricsSetCount() {
        return metricsSet_.size();
      }
      /**
       * <pre>
       * Type of metrics to use for evaluation.
       * </pre>
       *
       * <code>repeated string metrics_set = 8;</code>
       */
      public java.lang.String getMetricsSet(int index) {
        return metricsSet_.get(index);
      }
      /**
       * <pre>
       * Type of metrics to use for evaluation.
       * </pre>
       *
       * <code>repeated string metrics_set = 8;</code>
       */
      public com.google.protobuf.ByteString
          getMetricsSetBytes(int index) {
        return metricsSet_.getByteString(index);
      }
      /**
       * <pre>
       * Type of metrics to use for evaluation.
       * </pre>
       *
       * <code>repeated string metrics_set = 8;</code>
       */
      public Builder setMetricsSet(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMetricsSetIsMutable();
        metricsSet_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of metrics to use for evaluation.
       * </pre>
       *
       * <code>repeated string metrics_set = 8;</code>
       */
      public Builder addMetricsSet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMetricsSetIsMutable();
        metricsSet_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of metrics to use for evaluation.
       * </pre>
       *
       * <code>repeated string metrics_set = 8;</code>
       */
      public Builder addAllMetricsSet(
          java.lang.Iterable<java.lang.String> values) {
        ensureMetricsSetIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, metricsSet_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of metrics to use for evaluation.
       * </pre>
       *
       * <code>repeated string metrics_set = 8;</code>
       */
      public Builder clearMetricsSet() {
        metricsSet_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of metrics to use for evaluation.
       * </pre>
       *
       * <code>repeated string metrics_set = 8;</code>
       */
      public Builder addMetricsSetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMetricsSetIsMutable();
        metricsSet_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object exportPath_ = "";
      /**
       * <pre>
       * Path to export detections to COCO compatible JSON format.
       * </pre>
       *
       * <code>optional string export_path = 9 [default = ""];</code>
       */
      public boolean hasExportPath() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * Path to export detections to COCO compatible JSON format.
       * </pre>
       *
       * <code>optional string export_path = 9 [default = ""];</code>
       */
      public java.lang.String getExportPath() {
        java.lang.Object ref = exportPath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            exportPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Path to export detections to COCO compatible JSON format.
       * </pre>
       *
       * <code>optional string export_path = 9 [default = ""];</code>
       */
      public com.google.protobuf.ByteString
          getExportPathBytes() {
        java.lang.Object ref = exportPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          exportPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Path to export detections to COCO compatible JSON format.
       * </pre>
       *
       * <code>optional string export_path = 9 [default = ""];</code>
       */
      public Builder setExportPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        exportPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to export detections to COCO compatible JSON format.
       * </pre>
       *
       * <code>optional string export_path = 9 [default = ""];</code>
       */
      public Builder clearExportPath() {
        bitField0_ = (bitField0_ & ~0x00000100);
        exportPath_ = getDefaultInstance().getExportPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to export detections to COCO compatible JSON format.
       * </pre>
       *
       * <code>optional string export_path = 9 [default = ""];</code>
       */
      public Builder setExportPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        exportPath_ = value;
        onChanged();
        return this;
      }

      private boolean ignoreGroundtruth_ ;
      /**
       * <pre>
       * Option to not read groundtruth labels and only export detections to
       * COCO-compatible JSON file.
       * </pre>
       *
       * <code>optional bool ignore_groundtruth = 10 [default = false];</code>
       */
      public boolean hasIgnoreGroundtruth() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * Option to not read groundtruth labels and only export detections to
       * COCO-compatible JSON file.
       * </pre>
       *
       * <code>optional bool ignore_groundtruth = 10 [default = false];</code>
       */
      public boolean getIgnoreGroundtruth() {
        return ignoreGroundtruth_;
      }
      /**
       * <pre>
       * Option to not read groundtruth labels and only export detections to
       * COCO-compatible JSON file.
       * </pre>
       *
       * <code>optional bool ignore_groundtruth = 10 [default = false];</code>
       */
      public Builder setIgnoreGroundtruth(boolean value) {
        bitField0_ |= 0x00000200;
        ignoreGroundtruth_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Option to not read groundtruth labels and only export detections to
       * COCO-compatible JSON file.
       * </pre>
       *
       * <code>optional bool ignore_groundtruth = 10 [default = false];</code>
       */
      public Builder clearIgnoreGroundtruth() {
        bitField0_ = (bitField0_ & ~0x00000200);
        ignoreGroundtruth_ = false;
        onChanged();
        return this;
      }

      private boolean useMovingAverages_ ;
      /**
       * <pre>
       * Use exponential moving averages of variables for evaluation.
       * TODO(rathodv): When this is false make sure the model is constructed
       * without moving averages in restore_fn.
       * </pre>
       *
       * <code>optional bool use_moving_averages = 11 [default = false];</code>
       */
      public boolean hasUseMovingAverages() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * Use exponential moving averages of variables for evaluation.
       * TODO(rathodv): When this is false make sure the model is constructed
       * without moving averages in restore_fn.
       * </pre>
       *
       * <code>optional bool use_moving_averages = 11 [default = false];</code>
       */
      public boolean getUseMovingAverages() {
        return useMovingAverages_;
      }
      /**
       * <pre>
       * Use exponential moving averages of variables for evaluation.
       * TODO(rathodv): When this is false make sure the model is constructed
       * without moving averages in restore_fn.
       * </pre>
       *
       * <code>optional bool use_moving_averages = 11 [default = false];</code>
       */
      public Builder setUseMovingAverages(boolean value) {
        bitField0_ |= 0x00000400;
        useMovingAverages_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use exponential moving averages of variables for evaluation.
       * TODO(rathodv): When this is false make sure the model is constructed
       * without moving averages in restore_fn.
       * </pre>
       *
       * <code>optional bool use_moving_averages = 11 [default = false];</code>
       */
      public Builder clearUseMovingAverages() {
        bitField0_ = (bitField0_ & ~0x00000400);
        useMovingAverages_ = false;
        onChanged();
        return this;
      }

      private boolean evalInstanceMasks_ ;
      /**
       * <pre>
       * Whether to evaluate instance masks.
       * Note that since there is no evaluation code currently for instance
       * segmenation this option is unused.
       * </pre>
       *
       * <code>optional bool eval_instance_masks = 12 [default = false];</code>
       */
      public boolean hasEvalInstanceMasks() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * Whether to evaluate instance masks.
       * Note that since there is no evaluation code currently for instance
       * segmenation this option is unused.
       * </pre>
       *
       * <code>optional bool eval_instance_masks = 12 [default = false];</code>
       */
      public boolean getEvalInstanceMasks() {
        return evalInstanceMasks_;
      }
      /**
       * <pre>
       * Whether to evaluate instance masks.
       * Note that since there is no evaluation code currently for instance
       * segmenation this option is unused.
       * </pre>
       *
       * <code>optional bool eval_instance_masks = 12 [default = false];</code>
       */
      public Builder setEvalInstanceMasks(boolean value) {
        bitField0_ |= 0x00000800;
        evalInstanceMasks_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to evaluate instance masks.
       * Note that since there is no evaluation code currently for instance
       * segmenation this option is unused.
       * </pre>
       *
       * <code>optional bool eval_instance_masks = 12 [default = false];</code>
       */
      public Builder clearEvalInstanceMasks() {
        bitField0_ = (bitField0_ & ~0x00000800);
        evalInstanceMasks_ = false;
        onChanged();
        return this;
      }

      private float minScoreThreshold_ = 0.5F;
      /**
       * <pre>
       * Minimum score threshold for a detected object box to be visualized
       * </pre>
       *
       * <code>optional float min_score_threshold = 13 [default = 0.5];</code>
       */
      public boolean hasMinScoreThreshold() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * Minimum score threshold for a detected object box to be visualized
       * </pre>
       *
       * <code>optional float min_score_threshold = 13 [default = 0.5];</code>
       */
      public float getMinScoreThreshold() {
        return minScoreThreshold_;
      }
      /**
       * <pre>
       * Minimum score threshold for a detected object box to be visualized
       * </pre>
       *
       * <code>optional float min_score_threshold = 13 [default = 0.5];</code>
       */
      public Builder setMinScoreThreshold(float value) {
        bitField0_ |= 0x00001000;
        minScoreThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Minimum score threshold for a detected object box to be visualized
       * </pre>
       *
       * <code>optional float min_score_threshold = 13 [default = 0.5];</code>
       */
      public Builder clearMinScoreThreshold() {
        bitField0_ = (bitField0_ & ~0x00001000);
        minScoreThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      private int maxNumBoxesToVisualize_ = 20;
      /**
       * <pre>
       * Maximum number of detections to visualize
       * </pre>
       *
       * <code>optional int32 max_num_boxes_to_visualize = 14 [default = 20];</code>
       */
      public boolean hasMaxNumBoxesToVisualize() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       * Maximum number of detections to visualize
       * </pre>
       *
       * <code>optional int32 max_num_boxes_to_visualize = 14 [default = 20];</code>
       */
      public int getMaxNumBoxesToVisualize() {
        return maxNumBoxesToVisualize_;
      }
      /**
       * <pre>
       * Maximum number of detections to visualize
       * </pre>
       *
       * <code>optional int32 max_num_boxes_to_visualize = 14 [default = 20];</code>
       */
      public Builder setMaxNumBoxesToVisualize(int value) {
        bitField0_ |= 0x00002000;
        maxNumBoxesToVisualize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum number of detections to visualize
       * </pre>
       *
       * <code>optional int32 max_num_boxes_to_visualize = 14 [default = 20];</code>
       */
      public Builder clearMaxNumBoxesToVisualize() {
        bitField0_ = (bitField0_ & ~0x00002000);
        maxNumBoxesToVisualize_ = 20;
        onChanged();
        return this;
      }

      private boolean skipScores_ ;
      /**
       * <pre>
       * When drawing a single detection, each label is by default visualized as
       * &lt;label name&gt; : &lt;label score&gt;. One can skip the name or/and score using the
       * following fields:
       * </pre>
       *
       * <code>optional bool skip_scores = 15 [default = false];</code>
       */
      public boolean hasSkipScores() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <pre>
       * When drawing a single detection, each label is by default visualized as
       * &lt;label name&gt; : &lt;label score&gt;. One can skip the name or/and score using the
       * following fields:
       * </pre>
       *
       * <code>optional bool skip_scores = 15 [default = false];</code>
       */
      public boolean getSkipScores() {
        return skipScores_;
      }
      /**
       * <pre>
       * When drawing a single detection, each label is by default visualized as
       * &lt;label name&gt; : &lt;label score&gt;. One can skip the name or/and score using the
       * following fields:
       * </pre>
       *
       * <code>optional bool skip_scores = 15 [default = false];</code>
       */
      public Builder setSkipScores(boolean value) {
        bitField0_ |= 0x00004000;
        skipScores_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When drawing a single detection, each label is by default visualized as
       * &lt;label name&gt; : &lt;label score&gt;. One can skip the name or/and score using the
       * following fields:
       * </pre>
       *
       * <code>optional bool skip_scores = 15 [default = false];</code>
       */
      public Builder clearSkipScores() {
        bitField0_ = (bitField0_ & ~0x00004000);
        skipScores_ = false;
        onChanged();
        return this;
      }

      private boolean skipLabels_ ;
      /**
       * <code>optional bool skip_labels = 16 [default = false];</code>
       */
      public boolean hasSkipLabels() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bool skip_labels = 16 [default = false];</code>
       */
      public boolean getSkipLabels() {
        return skipLabels_;
      }
      /**
       * <code>optional bool skip_labels = 16 [default = false];</code>
       */
      public Builder setSkipLabels(boolean value) {
        bitField0_ |= 0x00008000;
        skipLabels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool skip_labels = 16 [default = false];</code>
       */
      public Builder clearSkipLabels() {
        bitField0_ = (bitField0_ & ~0x00008000);
        skipLabels_ = false;
        onChanged();
        return this;
      }

      private boolean visualizeGroundtruthBoxes_ ;
      /**
       * <pre>
       * Whether to show groundtruth boxes in addition to detected boxes in
       * visualizations.
       * </pre>
       *
       * <code>optional bool visualize_groundtruth_boxes = 17 [default = false];</code>
       */
      public boolean hasVisualizeGroundtruthBoxes() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <pre>
       * Whether to show groundtruth boxes in addition to detected boxes in
       * visualizations.
       * </pre>
       *
       * <code>optional bool visualize_groundtruth_boxes = 17 [default = false];</code>
       */
      public boolean getVisualizeGroundtruthBoxes() {
        return visualizeGroundtruthBoxes_;
      }
      /**
       * <pre>
       * Whether to show groundtruth boxes in addition to detected boxes in
       * visualizations.
       * </pre>
       *
       * <code>optional bool visualize_groundtruth_boxes = 17 [default = false];</code>
       */
      public Builder setVisualizeGroundtruthBoxes(boolean value) {
        bitField0_ |= 0x00010000;
        visualizeGroundtruthBoxes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to show groundtruth boxes in addition to detected boxes in
       * visualizations.
       * </pre>
       *
       * <code>optional bool visualize_groundtruth_boxes = 17 [default = false];</code>
       */
      public Builder clearVisualizeGroundtruthBoxes() {
        bitField0_ = (bitField0_ & ~0x00010000);
        visualizeGroundtruthBoxes_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object groundtruthBoxVisualizationColor_ = "black";
      /**
       * <pre>
       * Box color for visualizing groundtruth boxes.
       * </pre>
       *
       * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
       */
      public boolean hasGroundtruthBoxVisualizationColor() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <pre>
       * Box color for visualizing groundtruth boxes.
       * </pre>
       *
       * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
       */
      public java.lang.String getGroundtruthBoxVisualizationColor() {
        java.lang.Object ref = groundtruthBoxVisualizationColor_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            groundtruthBoxVisualizationColor_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Box color for visualizing groundtruth boxes.
       * </pre>
       *
       * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
       */
      public com.google.protobuf.ByteString
          getGroundtruthBoxVisualizationColorBytes() {
        java.lang.Object ref = groundtruthBoxVisualizationColor_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          groundtruthBoxVisualizationColor_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Box color for visualizing groundtruth boxes.
       * </pre>
       *
       * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
       */
      public Builder setGroundtruthBoxVisualizationColor(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        groundtruthBoxVisualizationColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Box color for visualizing groundtruth boxes.
       * </pre>
       *
       * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
       */
      public Builder clearGroundtruthBoxVisualizationColor() {
        bitField0_ = (bitField0_ & ~0x00020000);
        groundtruthBoxVisualizationColor_ = getDefaultInstance().getGroundtruthBoxVisualizationColor();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Box color for visualizing groundtruth boxes.
       * </pre>
       *
       * <code>optional string groundtruth_box_visualization_color = 18 [default = "black"];</code>
       */
      public Builder setGroundtruthBoxVisualizationColorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        groundtruthBoxVisualizationColor_ = value;
        onChanged();
        return this;
      }

      private boolean keepImageIdForVisualizationExport_ ;
      /**
       * <pre>
       * Whether to keep image identifier in filename when exported to
       * visualization_export_dir.
       * </pre>
       *
       * <code>optional bool keep_image_id_for_visualization_export = 19 [default = false];</code>
       */
      public boolean hasKeepImageIdForVisualizationExport() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <pre>
       * Whether to keep image identifier in filename when exported to
       * visualization_export_dir.
       * </pre>
       *
       * <code>optional bool keep_image_id_for_visualization_export = 19 [default = false];</code>
       */
      public boolean getKeepImageIdForVisualizationExport() {
        return keepImageIdForVisualizationExport_;
      }
      /**
       * <pre>
       * Whether to keep image identifier in filename when exported to
       * visualization_export_dir.
       * </pre>
       *
       * <code>optional bool keep_image_id_for_visualization_export = 19 [default = false];</code>
       */
      public Builder setKeepImageIdForVisualizationExport(boolean value) {
        bitField0_ |= 0x00040000;
        keepImageIdForVisualizationExport_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to keep image identifier in filename when exported to
       * visualization_export_dir.
       * </pre>
       *
       * <code>optional bool keep_image_id_for_visualization_export = 19 [default = false];</code>
       */
      public Builder clearKeepImageIdForVisualizationExport() {
        bitField0_ = (bitField0_ & ~0x00040000);
        keepImageIdForVisualizationExport_ = false;
        onChanged();
        return this;
      }

      private boolean retainOriginalImages_ = true;
      /**
       * <pre>
       * Whether to retain original images (i.e. not pre-processed) in the tensor
       * dictionary, so that they can be displayed in Tensorboard.
       * </pre>
       *
       * <code>optional bool retain_original_images = 23 [default = true];</code>
       */
      public boolean hasRetainOriginalImages() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <pre>
       * Whether to retain original images (i.e. not pre-processed) in the tensor
       * dictionary, so that they can be displayed in Tensorboard.
       * </pre>
       *
       * <code>optional bool retain_original_images = 23 [default = true];</code>
       */
      public boolean getRetainOriginalImages() {
        return retainOriginalImages_;
      }
      /**
       * <pre>
       * Whether to retain original images (i.e. not pre-processed) in the tensor
       * dictionary, so that they can be displayed in Tensorboard.
       * </pre>
       *
       * <code>optional bool retain_original_images = 23 [default = true];</code>
       */
      public Builder setRetainOriginalImages(boolean value) {
        bitField0_ |= 0x00080000;
        retainOriginalImages_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to retain original images (i.e. not pre-processed) in the tensor
       * dictionary, so that they can be displayed in Tensorboard.
       * </pre>
       *
       * <code>optional bool retain_original_images = 23 [default = true];</code>
       */
      public Builder clearRetainOriginalImages() {
        bitField0_ = (bitField0_ & ~0x00080000);
        retainOriginalImages_ = true;
        onChanged();
        return this;
      }

      private boolean includeMetricsPerCategory_ ;
      /**
       * <pre>
       * If True, additionally include per-category metrics.
       * </pre>
       *
       * <code>optional bool include_metrics_per_category = 24 [default = false];</code>
       */
      public boolean hasIncludeMetricsPerCategory() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <pre>
       * If True, additionally include per-category metrics.
       * </pre>
       *
       * <code>optional bool include_metrics_per_category = 24 [default = false];</code>
       */
      public boolean getIncludeMetricsPerCategory() {
        return includeMetricsPerCategory_;
      }
      /**
       * <pre>
       * If True, additionally include per-category metrics.
       * </pre>
       *
       * <code>optional bool include_metrics_per_category = 24 [default = false];</code>
       */
      public Builder setIncludeMetricsPerCategory(boolean value) {
        bitField0_ |= 0x00100000;
        includeMetricsPerCategory_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If True, additionally include per-category metrics.
       * </pre>
       *
       * <code>optional bool include_metrics_per_category = 24 [default = false];</code>
       */
      public Builder clearIncludeMetricsPerCategory() {
        bitField0_ = (bitField0_ & ~0x00100000);
        includeMetricsPerCategory_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:object_detection.protos.EvalConfig)
    }

    // @@protoc_insertion_point(class_scope:object_detection.protos.EvalConfig)
    private static final object_detection.protos.Eval.EvalConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new object_detection.protos.Eval.EvalConfig();
    }

    public static object_detection.protos.Eval.EvalConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<EvalConfig>
        PARSER = new com.google.protobuf.AbstractParser<EvalConfig>() {
      @java.lang.Override
      public EvalConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EvalConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EvalConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EvalConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public object_detection.protos.Eval.EvalConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_object_detection_protos_EvalConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_object_detection_protos_EvalConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"object_detection/protos/eval.proto\022\027ob" +
      "ject_detection.protos\"\330\005\n\nEvalConfig\022\036\n\022" +
      "num_visualizations\030\001 \001(\r:\00210\022\032\n\014num_exam" +
      "ples\030\002 \001(\r:\0045000\022\037\n\022eval_interval_secs\030\003" +
      " \001(\r:\003300\022\024\n\tmax_evals\030\004 \001(\r:\0010\022\031\n\nsave_" +
      "graph\030\005 \001(\010:\005false\022\"\n\030visualization_expo" +
      "rt_dir\030\006 \001(\t:\000\022\025\n\013eval_master\030\007 \001(\t:\000\022\023\n" +
      "\013metrics_set\030\010 \003(\t\022\025\n\013export_path\030\t \001(\t:" +
      "\000\022!\n\022ignore_groundtruth\030\n \001(\010:\005false\022\"\n\023" +
      "use_moving_averages\030\013 \001(\010:\005false\022\"\n\023eval" +
      "_instance_masks\030\014 \001(\010:\005false\022 \n\023min_scor" +
      "e_threshold\030\r \001(\002:\0030.5\022&\n\032max_num_boxes_" +
      "to_visualize\030\016 \001(\005:\00220\022\032\n\013skip_scores\030\017 " +
      "\001(\010:\005false\022\032\n\013skip_labels\030\020 \001(\010:\005false\022*" +
      "\n\033visualize_groundtruth_boxes\030\021 \001(\010:\005fal" +
      "se\0222\n#groundtruth_box_visualization_colo" +
      "r\030\022 \001(\t:\005black\0225\n&keep_image_id_for_visu" +
      "alization_export\030\023 \001(\010:\005false\022$\n\026retain_" +
      "original_images\030\027 \001(\010:\004true\022+\n\034include_m" +
      "etrics_per_category\030\030 \001(\010:\005false"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_object_detection_protos_EvalConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_object_detection_protos_EvalConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_object_detection_protos_EvalConfig_descriptor,
        new java.lang.String[] { "NumVisualizations", "NumExamples", "EvalIntervalSecs", "MaxEvals", "SaveGraph", "VisualizationExportDir", "EvalMaster", "MetricsSet", "ExportPath", "IgnoreGroundtruth", "UseMovingAverages", "EvalInstanceMasks", "MinScoreThreshold", "MaxNumBoxesToVisualize", "SkipScores", "SkipLabels", "VisualizeGroundtruthBoxes", "GroundtruthBoxVisualizationColor", "KeepImageIdForVisualizationExport", "RetainOriginalImages", "IncludeMetricsPerCategory", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
