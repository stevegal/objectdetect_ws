// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/train.proto

package object_detection.protos;

public final class Train {
  private Train() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TrainConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:object_detection.protos.TrainConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Effective batch size to use for training.
     * For TPU (or sync SGD jobs), the batch size per core (or GPU) is going to be
     * `batch_size` / number of cores (or `batch_size` / number of GPUs).
     * </pre>
     *
     * <code>optional uint32 batch_size = 1 [default = 32];</code>
     */
    boolean hasBatchSize();
    /**
     * <pre>
     * Effective batch size to use for training.
     * For TPU (or sync SGD jobs), the batch size per core (or GPU) is going to be
     * `batch_size` / number of cores (or `batch_size` / number of GPUs).
     * </pre>
     *
     * <code>optional uint32 batch_size = 1 [default = 32];</code>
     */
    int getBatchSize();

    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    java.util.List<object_detection.protos.Preprocessor.PreprocessingStep> 
        getDataAugmentationOptionsList();
    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    object_detection.protos.Preprocessor.PreprocessingStep getDataAugmentationOptions(int index);
    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    int getDataAugmentationOptionsCount();
    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    java.util.List<? extends object_detection.protos.Preprocessor.PreprocessingStepOrBuilder> 
        getDataAugmentationOptionsOrBuilderList();
    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    object_detection.protos.Preprocessor.PreprocessingStepOrBuilder getDataAugmentationOptionsOrBuilder(
        int index);

    /**
     * <pre>
     * Whether to synchronize replicas during training.
     * </pre>
     *
     * <code>optional bool sync_replicas = 3 [default = false];</code>
     */
    boolean hasSyncReplicas();
    /**
     * <pre>
     * Whether to synchronize replicas during training.
     * </pre>
     *
     * <code>optional bool sync_replicas = 3 [default = false];</code>
     */
    boolean getSyncReplicas();

    /**
     * <pre>
     * How frequently to keep checkpoints.
     * </pre>
     *
     * <code>optional uint32 keep_checkpoint_every_n_hours = 4 [default = 1000];</code>
     */
    boolean hasKeepCheckpointEveryNHours();
    /**
     * <pre>
     * How frequently to keep checkpoints.
     * </pre>
     *
     * <code>optional uint32 keep_checkpoint_every_n_hours = 4 [default = 1000];</code>
     */
    int getKeepCheckpointEveryNHours();

    /**
     * <pre>
     * Optimizer used to train the DetectionModel.
     * </pre>
     *
     * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
     */
    boolean hasOptimizer();
    /**
     * <pre>
     * Optimizer used to train the DetectionModel.
     * </pre>
     *
     * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
     */
    object_detection.protos.OptimizerOuterClass.Optimizer getOptimizer();
    /**
     * <pre>
     * Optimizer used to train the DetectionModel.
     * </pre>
     *
     * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
     */
    object_detection.protos.OptimizerOuterClass.OptimizerOrBuilder getOptimizerOrBuilder();

    /**
     * <pre>
     * If greater than 0, clips gradients by this value.
     * </pre>
     *
     * <code>optional float gradient_clipping_by_norm = 6 [default = 0];</code>
     */
    boolean hasGradientClippingByNorm();
    /**
     * <pre>
     * If greater than 0, clips gradients by this value.
     * </pre>
     *
     * <code>optional float gradient_clipping_by_norm = 6 [default = 0];</code>
     */
    float getGradientClippingByNorm();

    /**
     * <pre>
     * Checkpoint to restore variables from. Typically used to load feature
     * extractor variables trained outside of object detection.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
     */
    boolean hasFineTuneCheckpoint();
    /**
     * <pre>
     * Checkpoint to restore variables from. Typically used to load feature
     * extractor variables trained outside of object detection.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
     */
    java.lang.String getFineTuneCheckpoint();
    /**
     * <pre>
     * Checkpoint to restore variables from. Typically used to load feature
     * extractor variables trained outside of object detection.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
     */
    com.google.protobuf.ByteString
        getFineTuneCheckpointBytes();

    /**
     * <pre>
     * Type of checkpoint to restore variables from, e.g. 'classification' or
     * 'detection'. Provides extensibility to from_detection_checkpoint.
     * Typically used to load feature extractor variables from trained models.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
     */
    boolean hasFineTuneCheckpointType();
    /**
     * <pre>
     * Type of checkpoint to restore variables from, e.g. 'classification' or
     * 'detection'. Provides extensibility to from_detection_checkpoint.
     * Typically used to load feature extractor variables from trained models.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
     */
    java.lang.String getFineTuneCheckpointType();
    /**
     * <pre>
     * Type of checkpoint to restore variables from, e.g. 'classification' or
     * 'detection'. Provides extensibility to from_detection_checkpoint.
     * Typically used to load feature extractor variables from trained models.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
     */
    com.google.protobuf.ByteString
        getFineTuneCheckpointTypeBytes();

    /**
     * <pre>
     * [Deprecated]: use fine_tune_checkpoint_type instead.
     * Specifies if the finetune checkpoint is from an object detection model.
     * If from an object detection model, the model being trained should have
     * the same parameters with the exception of the num_classes parameter.
     * If false, it assumes the checkpoint was a object classification model.
     * </pre>
     *
     * <code>optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasFromDetectionCheckpoint();
    /**
     * <pre>
     * [Deprecated]: use fine_tune_checkpoint_type instead.
     * Specifies if the finetune checkpoint is from an object detection model.
     * If from an object detection model, the model being trained should have
     * the same parameters with the exception of the num_classes parameter.
     * If false, it assumes the checkpoint was a object classification model.
     * </pre>
     *
     * <code>optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];</code>
     */
    @java.lang.Deprecated boolean getFromDetectionCheckpoint();

    /**
     * <pre>
     * Whether to load all checkpoint vars that match model variable names and
     * sizes. This option is only available if `from_detection_checkpoint` is
     * True.
     * </pre>
     *
     * <code>optional bool load_all_detection_checkpoint_vars = 19 [default = false];</code>
     */
    boolean hasLoadAllDetectionCheckpointVars();
    /**
     * <pre>
     * Whether to load all checkpoint vars that match model variable names and
     * sizes. This option is only available if `from_detection_checkpoint` is
     * True.
     * </pre>
     *
     * <code>optional bool load_all_detection_checkpoint_vars = 19 [default = false];</code>
     */
    boolean getLoadAllDetectionCheckpointVars();

    /**
     * <pre>
     * Number of steps to train the DetectionModel for. If 0, will train the model
     * indefinitely.
     * </pre>
     *
     * <code>optional uint32 num_steps = 9 [default = 0];</code>
     */
    boolean hasNumSteps();
    /**
     * <pre>
     * Number of steps to train the DetectionModel for. If 0, will train the model
     * indefinitely.
     * </pre>
     *
     * <code>optional uint32 num_steps = 9 [default = 0];</code>
     */
    int getNumSteps();

    /**
     * <pre>
     * Number of training steps between replica startup.
     * This flag must be set to 0 if sync_replicas is set to true.
     * </pre>
     *
     * <code>optional float startup_delay_steps = 10 [default = 15];</code>
     */
    boolean hasStartupDelaySteps();
    /**
     * <pre>
     * Number of training steps between replica startup.
     * This flag must be set to 0 if sync_replicas is set to true.
     * </pre>
     *
     * <code>optional float startup_delay_steps = 10 [default = 15];</code>
     */
    float getStartupDelaySteps();

    /**
     * <pre>
     * If greater than 0, multiplies the gradient of bias variables by this
     * amount.
     * </pre>
     *
     * <code>optional float bias_grad_multiplier = 11 [default = 0];</code>
     */
    boolean hasBiasGradMultiplier();
    /**
     * <pre>
     * If greater than 0, multiplies the gradient of bias variables by this
     * amount.
     * </pre>
     *
     * <code>optional float bias_grad_multiplier = 11 [default = 0];</code>
     */
    float getBiasGradMultiplier();

    /**
     * <pre>
     * Variables that should be updated during training. Note that variables which
     * also match the patterns in freeze_variables will be excluded.
     * </pre>
     *
     * <code>repeated string update_trainable_variables = 25;</code>
     */
    java.util.List<java.lang.String>
        getUpdateTrainableVariablesList();
    /**
     * <pre>
     * Variables that should be updated during training. Note that variables which
     * also match the patterns in freeze_variables will be excluded.
     * </pre>
     *
     * <code>repeated string update_trainable_variables = 25;</code>
     */
    int getUpdateTrainableVariablesCount();
    /**
     * <pre>
     * Variables that should be updated during training. Note that variables which
     * also match the patterns in freeze_variables will be excluded.
     * </pre>
     *
     * <code>repeated string update_trainable_variables = 25;</code>
     */
    java.lang.String getUpdateTrainableVariables(int index);
    /**
     * <pre>
     * Variables that should be updated during training. Note that variables which
     * also match the patterns in freeze_variables will be excluded.
     * </pre>
     *
     * <code>repeated string update_trainable_variables = 25;</code>
     */
    com.google.protobuf.ByteString
        getUpdateTrainableVariablesBytes(int index);

    /**
     * <pre>
     * Variables that should not be updated during training. If
     * update_trainable_variables is not empty, only eliminates the included
     * variables according to freeze_variables patterns.
     * </pre>
     *
     * <code>repeated string freeze_variables = 12;</code>
     */
    java.util.List<java.lang.String>
        getFreezeVariablesList();
    /**
     * <pre>
     * Variables that should not be updated during training. If
     * update_trainable_variables is not empty, only eliminates the included
     * variables according to freeze_variables patterns.
     * </pre>
     *
     * <code>repeated string freeze_variables = 12;</code>
     */
    int getFreezeVariablesCount();
    /**
     * <pre>
     * Variables that should not be updated during training. If
     * update_trainable_variables is not empty, only eliminates the included
     * variables according to freeze_variables patterns.
     * </pre>
     *
     * <code>repeated string freeze_variables = 12;</code>
     */
    java.lang.String getFreezeVariables(int index);
    /**
     * <pre>
     * Variables that should not be updated during training. If
     * update_trainable_variables is not empty, only eliminates the included
     * variables according to freeze_variables patterns.
     * </pre>
     *
     * <code>repeated string freeze_variables = 12;</code>
     */
    com.google.protobuf.ByteString
        getFreezeVariablesBytes(int index);

    /**
     * <pre>
     * Number of replicas to aggregate before making parameter updates.
     * </pre>
     *
     * <code>optional int32 replicas_to_aggregate = 13 [default = 1];</code>
     */
    boolean hasReplicasToAggregate();
    /**
     * <pre>
     * Number of replicas to aggregate before making parameter updates.
     * </pre>
     *
     * <code>optional int32 replicas_to_aggregate = 13 [default = 1];</code>
     */
    int getReplicasToAggregate();

    /**
     * <pre>
     * Maximum number of elements to store within a queue.
     * </pre>
     *
     * <code>optional int32 batch_queue_capacity = 14 [default = 150];</code>
     */
    boolean hasBatchQueueCapacity();
    /**
     * <pre>
     * Maximum number of elements to store within a queue.
     * </pre>
     *
     * <code>optional int32 batch_queue_capacity = 14 [default = 150];</code>
     */
    int getBatchQueueCapacity();

    /**
     * <pre>
     * Number of threads to use for batching.
     * </pre>
     *
     * <code>optional int32 num_batch_queue_threads = 15 [default = 8];</code>
     */
    boolean hasNumBatchQueueThreads();
    /**
     * <pre>
     * Number of threads to use for batching.
     * </pre>
     *
     * <code>optional int32 num_batch_queue_threads = 15 [default = 8];</code>
     */
    int getNumBatchQueueThreads();

    /**
     * <pre>
     * Maximum capacity of the queue used to prefetch assembled batches.
     * </pre>
     *
     * <code>optional int32 prefetch_queue_capacity = 16 [default = 5];</code>
     */
    boolean hasPrefetchQueueCapacity();
    /**
     * <pre>
     * Maximum capacity of the queue used to prefetch assembled batches.
     * </pre>
     *
     * <code>optional int32 prefetch_queue_capacity = 16 [default = 5];</code>
     */
    int getPrefetchQueueCapacity();

    /**
     * <pre>
     * If true, boxes with the same coordinates will be merged together.
     * This is useful when each box can have multiple labels.
     * Note that only Sigmoid classification losses should be used.
     * </pre>
     *
     * <code>optional bool merge_multiple_label_boxes = 17 [default = false];</code>
     */
    boolean hasMergeMultipleLabelBoxes();
    /**
     * <pre>
     * If true, boxes with the same coordinates will be merged together.
     * This is useful when each box can have multiple labels.
     * Note that only Sigmoid classification losses should be used.
     * </pre>
     *
     * <code>optional bool merge_multiple_label_boxes = 17 [default = false];</code>
     */
    boolean getMergeMultipleLabelBoxes();

    /**
     * <pre>
     * If true, will use multiclass scores from object annotations as ground
     * truth. Currently only compatible with annotated image inputs.
     * </pre>
     *
     * <code>optional bool use_multiclass_scores = 24 [default = false];</code>
     */
    boolean hasUseMulticlassScores();
    /**
     * <pre>
     * If true, will use multiclass scores from object annotations as ground
     * truth. Currently only compatible with annotated image inputs.
     * </pre>
     *
     * <code>optional bool use_multiclass_scores = 24 [default = false];</code>
     */
    boolean getUseMulticlassScores();

    /**
     * <pre>
     * Whether to add regularization loss to `total_loss`. This is true by
     * default and adds all regularization losses defined in the model to
     * `total_loss`.
     * Setting this option to false is very useful while debugging the model and
     * losses.
     * </pre>
     *
     * <code>optional bool add_regularization_loss = 18 [default = true];</code>
     */
    boolean hasAddRegularizationLoss();
    /**
     * <pre>
     * Whether to add regularization loss to `total_loss`. This is true by
     * default and adds all regularization losses defined in the model to
     * `total_loss`.
     * Setting this option to false is very useful while debugging the model and
     * losses.
     * </pre>
     *
     * <code>optional bool add_regularization_loss = 18 [default = true];</code>
     */
    boolean getAddRegularizationLoss();

    /**
     * <pre>
     * Maximum number of boxes used during training.
     * Set this to at least the maximum amount of boxes in the input data.
     * Otherwise, it may cause "Data loss: Attempted to pad to a smaller size
     * than the input element" errors.
     * </pre>
     *
     * <code>optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasMaxNumberOfBoxes();
    /**
     * <pre>
     * Maximum number of boxes used during training.
     * Set this to at least the maximum amount of boxes in the input data.
     * Otherwise, it may cause "Data loss: Attempted to pad to a smaller size
     * than the input element" errors.
     * </pre>
     *
     * <code>optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];</code>
     */
    @java.lang.Deprecated int getMaxNumberOfBoxes();

    /**
     * <pre>
     * Whether to remove padding along `num_boxes` dimension of the groundtruth
     * tensors.
     * </pre>
     *
     * <code>optional bool unpad_groundtruth_tensors = 21 [default = true];</code>
     */
    boolean hasUnpadGroundtruthTensors();
    /**
     * <pre>
     * Whether to remove padding along `num_boxes` dimension of the groundtruth
     * tensors.
     * </pre>
     *
     * <code>optional bool unpad_groundtruth_tensors = 21 [default = true];</code>
     */
    boolean getUnpadGroundtruthTensors();

    /**
     * <pre>
     * Whether to retain original images (i.e. not pre-processed) in the tensor
     * dictionary, so that they can be displayed in Tensorboard. Note that this
     * will lead to a larger memory footprint.
     * </pre>
     *
     * <code>optional bool retain_original_images = 23 [default = false];</code>
     */
    boolean hasRetainOriginalImages();
    /**
     * <pre>
     * Whether to retain original images (i.e. not pre-processed) in the tensor
     * dictionary, so that they can be displayed in Tensorboard. Note that this
     * will lead to a larger memory footprint.
     * </pre>
     *
     * <code>optional bool retain_original_images = 23 [default = false];</code>
     */
    boolean getRetainOriginalImages();
  }
  /**
   * <pre>
   * Message for configuring DetectionModel training jobs (train.py).
   * Next id: 26
   * </pre>
   *
   * Protobuf type {@code object_detection.protos.TrainConfig}
   */
  public  static final class TrainConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:object_detection.protos.TrainConfig)
      TrainConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TrainConfig.newBuilder() to construct.
    private TrainConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TrainConfig() {
      batchSize_ = 32;
      dataAugmentationOptions_ = java.util.Collections.emptyList();
      syncReplicas_ = false;
      keepCheckpointEveryNHours_ = 1000;
      gradientClippingByNorm_ = 0F;
      fineTuneCheckpoint_ = "";
      fineTuneCheckpointType_ = "";
      fromDetectionCheckpoint_ = false;
      loadAllDetectionCheckpointVars_ = false;
      numSteps_ = 0;
      startupDelaySteps_ = 15F;
      biasGradMultiplier_ = 0F;
      updateTrainableVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      freezeVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      replicasToAggregate_ = 1;
      batchQueueCapacity_ = 150;
      numBatchQueueThreads_ = 8;
      prefetchQueueCapacity_ = 5;
      mergeMultipleLabelBoxes_ = false;
      useMulticlassScores_ = false;
      addRegularizationLoss_ = true;
      maxNumberOfBoxes_ = 100;
      unpadGroundtruthTensors_ = true;
      retainOriginalImages_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TrainConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              batchSize_ = input.readUInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                dataAugmentationOptions_ = new java.util.ArrayList<object_detection.protos.Preprocessor.PreprocessingStep>();
                mutable_bitField0_ |= 0x00000002;
              }
              dataAugmentationOptions_.add(
                  input.readMessage(object_detection.protos.Preprocessor.PreprocessingStep.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              syncReplicas_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              keepCheckpointEveryNHours_ = input.readUInt32();
              break;
            }
            case 42: {
              object_detection.protos.OptimizerOuterClass.Optimizer.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = optimizer_.toBuilder();
              }
              optimizer_ = input.readMessage(object_detection.protos.OptimizerOuterClass.Optimizer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(optimizer_);
                optimizer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 53: {
              bitField0_ |= 0x00000010;
              gradientClippingByNorm_ = input.readFloat();
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              fineTuneCheckpoint_ = bs;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              fromDetectionCheckpoint_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000200;
              numSteps_ = input.readUInt32();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000400;
              startupDelaySteps_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000800;
              biasGradMultiplier_ = input.readFloat();
              break;
            }
            case 98: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                freezeVariables_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00004000;
              }
              freezeVariables_.add(bs);
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              replicasToAggregate_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              batchQueueCapacity_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              numBatchQueueThreads_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              prefetchQueueCapacity_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              mergeMultipleLabelBoxes_ = input.readBool();
              break;
            }
            case 144: {
              bitField0_ |= 0x00040000;
              addRegularizationLoss_ = input.readBool();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000100;
              loadAllDetectionCheckpointVars_ = input.readBool();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              maxNumberOfBoxes_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              unpadGroundtruthTensors_ = input.readBool();
              break;
            }
            case 178: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              fineTuneCheckpointType_ = bs;
              break;
            }
            case 184: {
              bitField0_ |= 0x00200000;
              retainOriginalImages_ = input.readBool();
              break;
            }
            case 192: {
              bitField0_ |= 0x00020000;
              useMulticlassScores_ = input.readBool();
              break;
            }
            case 202: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                updateTrainableVariables_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00002000;
              }
              updateTrainableVariables_.add(bs);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          dataAugmentationOptions_ = java.util.Collections.unmodifiableList(dataAugmentationOptions_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          freezeVariables_ = freezeVariables_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          updateTrainableVariables_ = updateTrainableVariables_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return object_detection.protos.Train.internal_static_object_detection_protos_TrainConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return object_detection.protos.Train.internal_static_object_detection_protos_TrainConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              object_detection.protos.Train.TrainConfig.class, object_detection.protos.Train.TrainConfig.Builder.class);
    }

    private int bitField0_;
    public static final int BATCH_SIZE_FIELD_NUMBER = 1;
    private int batchSize_;
    /**
     * <pre>
     * Effective batch size to use for training.
     * For TPU (or sync SGD jobs), the batch size per core (or GPU) is going to be
     * `batch_size` / number of cores (or `batch_size` / number of GPUs).
     * </pre>
     *
     * <code>optional uint32 batch_size = 1 [default = 32];</code>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Effective batch size to use for training.
     * For TPU (or sync SGD jobs), the batch size per core (or GPU) is going to be
     * `batch_size` / number of cores (or `batch_size` / number of GPUs).
     * </pre>
     *
     * <code>optional uint32 batch_size = 1 [default = 32];</code>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    public static final int DATA_AUGMENTATION_OPTIONS_FIELD_NUMBER = 2;
    private java.util.List<object_detection.protos.Preprocessor.PreprocessingStep> dataAugmentationOptions_;
    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    public java.util.List<object_detection.protos.Preprocessor.PreprocessingStep> getDataAugmentationOptionsList() {
      return dataAugmentationOptions_;
    }
    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    public java.util.List<? extends object_detection.protos.Preprocessor.PreprocessingStepOrBuilder> 
        getDataAugmentationOptionsOrBuilderList() {
      return dataAugmentationOptions_;
    }
    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    public int getDataAugmentationOptionsCount() {
      return dataAugmentationOptions_.size();
    }
    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    public object_detection.protos.Preprocessor.PreprocessingStep getDataAugmentationOptions(int index) {
      return dataAugmentationOptions_.get(index);
    }
    /**
     * <pre>
     * Data augmentation options.
     * </pre>
     *
     * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
     */
    public object_detection.protos.Preprocessor.PreprocessingStepOrBuilder getDataAugmentationOptionsOrBuilder(
        int index) {
      return dataAugmentationOptions_.get(index);
    }

    public static final int SYNC_REPLICAS_FIELD_NUMBER = 3;
    private boolean syncReplicas_;
    /**
     * <pre>
     * Whether to synchronize replicas during training.
     * </pre>
     *
     * <code>optional bool sync_replicas = 3 [default = false];</code>
     */
    public boolean hasSyncReplicas() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Whether to synchronize replicas during training.
     * </pre>
     *
     * <code>optional bool sync_replicas = 3 [default = false];</code>
     */
    public boolean getSyncReplicas() {
      return syncReplicas_;
    }

    public static final int KEEP_CHECKPOINT_EVERY_N_HOURS_FIELD_NUMBER = 4;
    private int keepCheckpointEveryNHours_;
    /**
     * <pre>
     * How frequently to keep checkpoints.
     * </pre>
     *
     * <code>optional uint32 keep_checkpoint_every_n_hours = 4 [default = 1000];</code>
     */
    public boolean hasKeepCheckpointEveryNHours() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * How frequently to keep checkpoints.
     * </pre>
     *
     * <code>optional uint32 keep_checkpoint_every_n_hours = 4 [default = 1000];</code>
     */
    public int getKeepCheckpointEveryNHours() {
      return keepCheckpointEveryNHours_;
    }

    public static final int OPTIMIZER_FIELD_NUMBER = 5;
    private object_detection.protos.OptimizerOuterClass.Optimizer optimizer_;
    /**
     * <pre>
     * Optimizer used to train the DetectionModel.
     * </pre>
     *
     * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
     */
    public boolean hasOptimizer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Optimizer used to train the DetectionModel.
     * </pre>
     *
     * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
     */
    public object_detection.protos.OptimizerOuterClass.Optimizer getOptimizer() {
      return optimizer_ == null ? object_detection.protos.OptimizerOuterClass.Optimizer.getDefaultInstance() : optimizer_;
    }
    /**
     * <pre>
     * Optimizer used to train the DetectionModel.
     * </pre>
     *
     * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
     */
    public object_detection.protos.OptimizerOuterClass.OptimizerOrBuilder getOptimizerOrBuilder() {
      return optimizer_ == null ? object_detection.protos.OptimizerOuterClass.Optimizer.getDefaultInstance() : optimizer_;
    }

    public static final int GRADIENT_CLIPPING_BY_NORM_FIELD_NUMBER = 6;
    private float gradientClippingByNorm_;
    /**
     * <pre>
     * If greater than 0, clips gradients by this value.
     * </pre>
     *
     * <code>optional float gradient_clipping_by_norm = 6 [default = 0];</code>
     */
    public boolean hasGradientClippingByNorm() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * If greater than 0, clips gradients by this value.
     * </pre>
     *
     * <code>optional float gradient_clipping_by_norm = 6 [default = 0];</code>
     */
    public float getGradientClippingByNorm() {
      return gradientClippingByNorm_;
    }

    public static final int FINE_TUNE_CHECKPOINT_FIELD_NUMBER = 7;
    private volatile java.lang.Object fineTuneCheckpoint_;
    /**
     * <pre>
     * Checkpoint to restore variables from. Typically used to load feature
     * extractor variables trained outside of object detection.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
     */
    public boolean hasFineTuneCheckpoint() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * Checkpoint to restore variables from. Typically used to load feature
     * extractor variables trained outside of object detection.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
     */
    public java.lang.String getFineTuneCheckpoint() {
      java.lang.Object ref = fineTuneCheckpoint_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fineTuneCheckpoint_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Checkpoint to restore variables from. Typically used to load feature
     * extractor variables trained outside of object detection.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
     */
    public com.google.protobuf.ByteString
        getFineTuneCheckpointBytes() {
      java.lang.Object ref = fineTuneCheckpoint_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fineTuneCheckpoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FINE_TUNE_CHECKPOINT_TYPE_FIELD_NUMBER = 22;
    private volatile java.lang.Object fineTuneCheckpointType_;
    /**
     * <pre>
     * Type of checkpoint to restore variables from, e.g. 'classification' or
     * 'detection'. Provides extensibility to from_detection_checkpoint.
     * Typically used to load feature extractor variables from trained models.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
     */
    public boolean hasFineTuneCheckpointType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * Type of checkpoint to restore variables from, e.g. 'classification' or
     * 'detection'. Provides extensibility to from_detection_checkpoint.
     * Typically used to load feature extractor variables from trained models.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
     */
    public java.lang.String getFineTuneCheckpointType() {
      java.lang.Object ref = fineTuneCheckpointType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fineTuneCheckpointType_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Type of checkpoint to restore variables from, e.g. 'classification' or
     * 'detection'. Provides extensibility to from_detection_checkpoint.
     * Typically used to load feature extractor variables from trained models.
     * </pre>
     *
     * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
     */
    public com.google.protobuf.ByteString
        getFineTuneCheckpointTypeBytes() {
      java.lang.Object ref = fineTuneCheckpointType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fineTuneCheckpointType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FROM_DETECTION_CHECKPOINT_FIELD_NUMBER = 8;
    private boolean fromDetectionCheckpoint_;
    /**
     * <pre>
     * [Deprecated]: use fine_tune_checkpoint_type instead.
     * Specifies if the finetune checkpoint is from an object detection model.
     * If from an object detection model, the model being trained should have
     * the same parameters with the exception of the num_classes parameter.
     * If false, it assumes the checkpoint was a object classification model.
     * </pre>
     *
     * <code>optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasFromDetectionCheckpoint() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * [Deprecated]: use fine_tune_checkpoint_type instead.
     * Specifies if the finetune checkpoint is from an object detection model.
     * If from an object detection model, the model being trained should have
     * the same parameters with the exception of the num_classes parameter.
     * If false, it assumes the checkpoint was a object classification model.
     * </pre>
     *
     * <code>optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean getFromDetectionCheckpoint() {
      return fromDetectionCheckpoint_;
    }

    public static final int LOAD_ALL_DETECTION_CHECKPOINT_VARS_FIELD_NUMBER = 19;
    private boolean loadAllDetectionCheckpointVars_;
    /**
     * <pre>
     * Whether to load all checkpoint vars that match model variable names and
     * sizes. This option is only available if `from_detection_checkpoint` is
     * True.
     * </pre>
     *
     * <code>optional bool load_all_detection_checkpoint_vars = 19 [default = false];</code>
     */
    public boolean hasLoadAllDetectionCheckpointVars() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * Whether to load all checkpoint vars that match model variable names and
     * sizes. This option is only available if `from_detection_checkpoint` is
     * True.
     * </pre>
     *
     * <code>optional bool load_all_detection_checkpoint_vars = 19 [default = false];</code>
     */
    public boolean getLoadAllDetectionCheckpointVars() {
      return loadAllDetectionCheckpointVars_;
    }

    public static final int NUM_STEPS_FIELD_NUMBER = 9;
    private int numSteps_;
    /**
     * <pre>
     * Number of steps to train the DetectionModel for. If 0, will train the model
     * indefinitely.
     * </pre>
     *
     * <code>optional uint32 num_steps = 9 [default = 0];</code>
     */
    public boolean hasNumSteps() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * Number of steps to train the DetectionModel for. If 0, will train the model
     * indefinitely.
     * </pre>
     *
     * <code>optional uint32 num_steps = 9 [default = 0];</code>
     */
    public int getNumSteps() {
      return numSteps_;
    }

    public static final int STARTUP_DELAY_STEPS_FIELD_NUMBER = 10;
    private float startupDelaySteps_;
    /**
     * <pre>
     * Number of training steps between replica startup.
     * This flag must be set to 0 if sync_replicas is set to true.
     * </pre>
     *
     * <code>optional float startup_delay_steps = 10 [default = 15];</code>
     */
    public boolean hasStartupDelaySteps() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * Number of training steps between replica startup.
     * This flag must be set to 0 if sync_replicas is set to true.
     * </pre>
     *
     * <code>optional float startup_delay_steps = 10 [default = 15];</code>
     */
    public float getStartupDelaySteps() {
      return startupDelaySteps_;
    }

    public static final int BIAS_GRAD_MULTIPLIER_FIELD_NUMBER = 11;
    private float biasGradMultiplier_;
    /**
     * <pre>
     * If greater than 0, multiplies the gradient of bias variables by this
     * amount.
     * </pre>
     *
     * <code>optional float bias_grad_multiplier = 11 [default = 0];</code>
     */
    public boolean hasBiasGradMultiplier() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * If greater than 0, multiplies the gradient of bias variables by this
     * amount.
     * </pre>
     *
     * <code>optional float bias_grad_multiplier = 11 [default = 0];</code>
     */
    public float getBiasGradMultiplier() {
      return biasGradMultiplier_;
    }

    public static final int UPDATE_TRAINABLE_VARIABLES_FIELD_NUMBER = 25;
    private com.google.protobuf.LazyStringList updateTrainableVariables_;
    /**
     * <pre>
     * Variables that should be updated during training. Note that variables which
     * also match the patterns in freeze_variables will be excluded.
     * </pre>
     *
     * <code>repeated string update_trainable_variables = 25;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getUpdateTrainableVariablesList() {
      return updateTrainableVariables_;
    }
    /**
     * <pre>
     * Variables that should be updated during training. Note that variables which
     * also match the patterns in freeze_variables will be excluded.
     * </pre>
     *
     * <code>repeated string update_trainable_variables = 25;</code>
     */
    public int getUpdateTrainableVariablesCount() {
      return updateTrainableVariables_.size();
    }
    /**
     * <pre>
     * Variables that should be updated during training. Note that variables which
     * also match the patterns in freeze_variables will be excluded.
     * </pre>
     *
     * <code>repeated string update_trainable_variables = 25;</code>
     */
    public java.lang.String getUpdateTrainableVariables(int index) {
      return updateTrainableVariables_.get(index);
    }
    /**
     * <pre>
     * Variables that should be updated during training. Note that variables which
     * also match the patterns in freeze_variables will be excluded.
     * </pre>
     *
     * <code>repeated string update_trainable_variables = 25;</code>
     */
    public com.google.protobuf.ByteString
        getUpdateTrainableVariablesBytes(int index) {
      return updateTrainableVariables_.getByteString(index);
    }

    public static final int FREEZE_VARIABLES_FIELD_NUMBER = 12;
    private com.google.protobuf.LazyStringList freezeVariables_;
    /**
     * <pre>
     * Variables that should not be updated during training. If
     * update_trainable_variables is not empty, only eliminates the included
     * variables according to freeze_variables patterns.
     * </pre>
     *
     * <code>repeated string freeze_variables = 12;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getFreezeVariablesList() {
      return freezeVariables_;
    }
    /**
     * <pre>
     * Variables that should not be updated during training. If
     * update_trainable_variables is not empty, only eliminates the included
     * variables according to freeze_variables patterns.
     * </pre>
     *
     * <code>repeated string freeze_variables = 12;</code>
     */
    public int getFreezeVariablesCount() {
      return freezeVariables_.size();
    }
    /**
     * <pre>
     * Variables that should not be updated during training. If
     * update_trainable_variables is not empty, only eliminates the included
     * variables according to freeze_variables patterns.
     * </pre>
     *
     * <code>repeated string freeze_variables = 12;</code>
     */
    public java.lang.String getFreezeVariables(int index) {
      return freezeVariables_.get(index);
    }
    /**
     * <pre>
     * Variables that should not be updated during training. If
     * update_trainable_variables is not empty, only eliminates the included
     * variables according to freeze_variables patterns.
     * </pre>
     *
     * <code>repeated string freeze_variables = 12;</code>
     */
    public com.google.protobuf.ByteString
        getFreezeVariablesBytes(int index) {
      return freezeVariables_.getByteString(index);
    }

    public static final int REPLICAS_TO_AGGREGATE_FIELD_NUMBER = 13;
    private int replicasToAggregate_;
    /**
     * <pre>
     * Number of replicas to aggregate before making parameter updates.
     * </pre>
     *
     * <code>optional int32 replicas_to_aggregate = 13 [default = 1];</code>
     */
    public boolean hasReplicasToAggregate() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * Number of replicas to aggregate before making parameter updates.
     * </pre>
     *
     * <code>optional int32 replicas_to_aggregate = 13 [default = 1];</code>
     */
    public int getReplicasToAggregate() {
      return replicasToAggregate_;
    }

    public static final int BATCH_QUEUE_CAPACITY_FIELD_NUMBER = 14;
    private int batchQueueCapacity_;
    /**
     * <pre>
     * Maximum number of elements to store within a queue.
     * </pre>
     *
     * <code>optional int32 batch_queue_capacity = 14 [default = 150];</code>
     */
    public boolean hasBatchQueueCapacity() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * Maximum number of elements to store within a queue.
     * </pre>
     *
     * <code>optional int32 batch_queue_capacity = 14 [default = 150];</code>
     */
    public int getBatchQueueCapacity() {
      return batchQueueCapacity_;
    }

    public static final int NUM_BATCH_QUEUE_THREADS_FIELD_NUMBER = 15;
    private int numBatchQueueThreads_;
    /**
     * <pre>
     * Number of threads to use for batching.
     * </pre>
     *
     * <code>optional int32 num_batch_queue_threads = 15 [default = 8];</code>
     */
    public boolean hasNumBatchQueueThreads() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <pre>
     * Number of threads to use for batching.
     * </pre>
     *
     * <code>optional int32 num_batch_queue_threads = 15 [default = 8];</code>
     */
    public int getNumBatchQueueThreads() {
      return numBatchQueueThreads_;
    }

    public static final int PREFETCH_QUEUE_CAPACITY_FIELD_NUMBER = 16;
    private int prefetchQueueCapacity_;
    /**
     * <pre>
     * Maximum capacity of the queue used to prefetch assembled batches.
     * </pre>
     *
     * <code>optional int32 prefetch_queue_capacity = 16 [default = 5];</code>
     */
    public boolean hasPrefetchQueueCapacity() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <pre>
     * Maximum capacity of the queue used to prefetch assembled batches.
     * </pre>
     *
     * <code>optional int32 prefetch_queue_capacity = 16 [default = 5];</code>
     */
    public int getPrefetchQueueCapacity() {
      return prefetchQueueCapacity_;
    }

    public static final int MERGE_MULTIPLE_LABEL_BOXES_FIELD_NUMBER = 17;
    private boolean mergeMultipleLabelBoxes_;
    /**
     * <pre>
     * If true, boxes with the same coordinates will be merged together.
     * This is useful when each box can have multiple labels.
     * Note that only Sigmoid classification losses should be used.
     * </pre>
     *
     * <code>optional bool merge_multiple_label_boxes = 17 [default = false];</code>
     */
    public boolean hasMergeMultipleLabelBoxes() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     * If true, boxes with the same coordinates will be merged together.
     * This is useful when each box can have multiple labels.
     * Note that only Sigmoid classification losses should be used.
     * </pre>
     *
     * <code>optional bool merge_multiple_label_boxes = 17 [default = false];</code>
     */
    public boolean getMergeMultipleLabelBoxes() {
      return mergeMultipleLabelBoxes_;
    }

    public static final int USE_MULTICLASS_SCORES_FIELD_NUMBER = 24;
    private boolean useMulticlassScores_;
    /**
     * <pre>
     * If true, will use multiclass scores from object annotations as ground
     * truth. Currently only compatible with annotated image inputs.
     * </pre>
     *
     * <code>optional bool use_multiclass_scores = 24 [default = false];</code>
     */
    public boolean hasUseMulticlassScores() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <pre>
     * If true, will use multiclass scores from object annotations as ground
     * truth. Currently only compatible with annotated image inputs.
     * </pre>
     *
     * <code>optional bool use_multiclass_scores = 24 [default = false];</code>
     */
    public boolean getUseMulticlassScores() {
      return useMulticlassScores_;
    }

    public static final int ADD_REGULARIZATION_LOSS_FIELD_NUMBER = 18;
    private boolean addRegularizationLoss_;
    /**
     * <pre>
     * Whether to add regularization loss to `total_loss`. This is true by
     * default and adds all regularization losses defined in the model to
     * `total_loss`.
     * Setting this option to false is very useful while debugging the model and
     * losses.
     * </pre>
     *
     * <code>optional bool add_regularization_loss = 18 [default = true];</code>
     */
    public boolean hasAddRegularizationLoss() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <pre>
     * Whether to add regularization loss to `total_loss`. This is true by
     * default and adds all regularization losses defined in the model to
     * `total_loss`.
     * Setting this option to false is very useful while debugging the model and
     * losses.
     * </pre>
     *
     * <code>optional bool add_regularization_loss = 18 [default = true];</code>
     */
    public boolean getAddRegularizationLoss() {
      return addRegularizationLoss_;
    }

    public static final int MAX_NUMBER_OF_BOXES_FIELD_NUMBER = 20;
    private int maxNumberOfBoxes_;
    /**
     * <pre>
     * Maximum number of boxes used during training.
     * Set this to at least the maximum amount of boxes in the input data.
     * Otherwise, it may cause "Data loss: Attempted to pad to a smaller size
     * than the input element" errors.
     * </pre>
     *
     * <code>optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasMaxNumberOfBoxes() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <pre>
     * Maximum number of boxes used during training.
     * Set this to at least the maximum amount of boxes in the input data.
     * Otherwise, it may cause "Data loss: Attempted to pad to a smaller size
     * than the input element" errors.
     * </pre>
     *
     * <code>optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];</code>
     */
    @java.lang.Deprecated public int getMaxNumberOfBoxes() {
      return maxNumberOfBoxes_;
    }

    public static final int UNPAD_GROUNDTRUTH_TENSORS_FIELD_NUMBER = 21;
    private boolean unpadGroundtruthTensors_;
    /**
     * <pre>
     * Whether to remove padding along `num_boxes` dimension of the groundtruth
     * tensors.
     * </pre>
     *
     * <code>optional bool unpad_groundtruth_tensors = 21 [default = true];</code>
     */
    public boolean hasUnpadGroundtruthTensors() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <pre>
     * Whether to remove padding along `num_boxes` dimension of the groundtruth
     * tensors.
     * </pre>
     *
     * <code>optional bool unpad_groundtruth_tensors = 21 [default = true];</code>
     */
    public boolean getUnpadGroundtruthTensors() {
      return unpadGroundtruthTensors_;
    }

    public static final int RETAIN_ORIGINAL_IMAGES_FIELD_NUMBER = 23;
    private boolean retainOriginalImages_;
    /**
     * <pre>
     * Whether to retain original images (i.e. not pre-processed) in the tensor
     * dictionary, so that they can be displayed in Tensorboard. Note that this
     * will lead to a larger memory footprint.
     * </pre>
     *
     * <code>optional bool retain_original_images = 23 [default = false];</code>
     */
    public boolean hasRetainOriginalImages() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <pre>
     * Whether to retain original images (i.e. not pre-processed) in the tensor
     * dictionary, so that they can be displayed in Tensorboard. Note that this
     * will lead to a larger memory footprint.
     * </pre>
     *
     * <code>optional bool retain_original_images = 23 [default = false];</code>
     */
    public boolean getRetainOriginalImages() {
      return retainOriginalImages_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, batchSize_);
      }
      for (int i = 0; i < dataAugmentationOptions_.size(); i++) {
        output.writeMessage(2, dataAugmentationOptions_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(3, syncReplicas_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, keepCheckpointEveryNHours_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, getOptimizer());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(6, gradientClippingByNorm_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, fineTuneCheckpoint_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, fromDetectionCheckpoint_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(9, numSteps_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(10, startupDelaySteps_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(11, biasGradMultiplier_);
      }
      for (int i = 0; i < freezeVariables_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, freezeVariables_.getRaw(i));
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, replicasToAggregate_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, batchQueueCapacity_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, numBatchQueueThreads_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, prefetchQueueCapacity_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBool(17, mergeMultipleLabelBoxes_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeBool(18, addRegularizationLoss_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(19, loadAllDetectionCheckpointVars_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(20, maxNumberOfBoxes_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeBool(21, unpadGroundtruthTensors_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 22, fineTuneCheckpointType_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeBool(23, retainOriginalImages_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeBool(24, useMulticlassScores_);
      }
      for (int i = 0; i < updateTrainableVariables_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 25, updateTrainableVariables_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, batchSize_);
      }
      for (int i = 0; i < dataAugmentationOptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, dataAugmentationOptions_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, syncReplicas_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, keepCheckpointEveryNHours_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getOptimizer());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, gradientClippingByNorm_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, fineTuneCheckpoint_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, fromDetectionCheckpoint_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, numSteps_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, startupDelaySteps_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, biasGradMultiplier_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < freezeVariables_.size(); i++) {
          dataSize += computeStringSizeNoTag(freezeVariables_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getFreezeVariablesList().size();
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, replicasToAggregate_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, batchQueueCapacity_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, numBatchQueueThreads_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, prefetchQueueCapacity_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, mergeMultipleLabelBoxes_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, addRegularizationLoss_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, loadAllDetectionCheckpointVars_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, maxNumberOfBoxes_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, unpadGroundtruthTensors_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(22, fineTuneCheckpointType_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, retainOriginalImages_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(24, useMulticlassScores_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < updateTrainableVariables_.size(); i++) {
          dataSize += computeStringSizeNoTag(updateTrainableVariables_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getUpdateTrainableVariablesList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof object_detection.protos.Train.TrainConfig)) {
        return super.equals(obj);
      }
      object_detection.protos.Train.TrainConfig other = (object_detection.protos.Train.TrainConfig) obj;

      boolean result = true;
      result = result && (hasBatchSize() == other.hasBatchSize());
      if (hasBatchSize()) {
        result = result && (getBatchSize()
            == other.getBatchSize());
      }
      result = result && getDataAugmentationOptionsList()
          .equals(other.getDataAugmentationOptionsList());
      result = result && (hasSyncReplicas() == other.hasSyncReplicas());
      if (hasSyncReplicas()) {
        result = result && (getSyncReplicas()
            == other.getSyncReplicas());
      }
      result = result && (hasKeepCheckpointEveryNHours() == other.hasKeepCheckpointEveryNHours());
      if (hasKeepCheckpointEveryNHours()) {
        result = result && (getKeepCheckpointEveryNHours()
            == other.getKeepCheckpointEveryNHours());
      }
      result = result && (hasOptimizer() == other.hasOptimizer());
      if (hasOptimizer()) {
        result = result && getOptimizer()
            .equals(other.getOptimizer());
      }
      result = result && (hasGradientClippingByNorm() == other.hasGradientClippingByNorm());
      if (hasGradientClippingByNorm()) {
        result = result && (
            java.lang.Float.floatToIntBits(getGradientClippingByNorm())
            == java.lang.Float.floatToIntBits(
                other.getGradientClippingByNorm()));
      }
      result = result && (hasFineTuneCheckpoint() == other.hasFineTuneCheckpoint());
      if (hasFineTuneCheckpoint()) {
        result = result && getFineTuneCheckpoint()
            .equals(other.getFineTuneCheckpoint());
      }
      result = result && (hasFineTuneCheckpointType() == other.hasFineTuneCheckpointType());
      if (hasFineTuneCheckpointType()) {
        result = result && getFineTuneCheckpointType()
            .equals(other.getFineTuneCheckpointType());
      }
      result = result && (hasFromDetectionCheckpoint() == other.hasFromDetectionCheckpoint());
      if (hasFromDetectionCheckpoint()) {
        result = result && (getFromDetectionCheckpoint()
            == other.getFromDetectionCheckpoint());
      }
      result = result && (hasLoadAllDetectionCheckpointVars() == other.hasLoadAllDetectionCheckpointVars());
      if (hasLoadAllDetectionCheckpointVars()) {
        result = result && (getLoadAllDetectionCheckpointVars()
            == other.getLoadAllDetectionCheckpointVars());
      }
      result = result && (hasNumSteps() == other.hasNumSteps());
      if (hasNumSteps()) {
        result = result && (getNumSteps()
            == other.getNumSteps());
      }
      result = result && (hasStartupDelaySteps() == other.hasStartupDelaySteps());
      if (hasStartupDelaySteps()) {
        result = result && (
            java.lang.Float.floatToIntBits(getStartupDelaySteps())
            == java.lang.Float.floatToIntBits(
                other.getStartupDelaySteps()));
      }
      result = result && (hasBiasGradMultiplier() == other.hasBiasGradMultiplier());
      if (hasBiasGradMultiplier()) {
        result = result && (
            java.lang.Float.floatToIntBits(getBiasGradMultiplier())
            == java.lang.Float.floatToIntBits(
                other.getBiasGradMultiplier()));
      }
      result = result && getUpdateTrainableVariablesList()
          .equals(other.getUpdateTrainableVariablesList());
      result = result && getFreezeVariablesList()
          .equals(other.getFreezeVariablesList());
      result = result && (hasReplicasToAggregate() == other.hasReplicasToAggregate());
      if (hasReplicasToAggregate()) {
        result = result && (getReplicasToAggregate()
            == other.getReplicasToAggregate());
      }
      result = result && (hasBatchQueueCapacity() == other.hasBatchQueueCapacity());
      if (hasBatchQueueCapacity()) {
        result = result && (getBatchQueueCapacity()
            == other.getBatchQueueCapacity());
      }
      result = result && (hasNumBatchQueueThreads() == other.hasNumBatchQueueThreads());
      if (hasNumBatchQueueThreads()) {
        result = result && (getNumBatchQueueThreads()
            == other.getNumBatchQueueThreads());
      }
      result = result && (hasPrefetchQueueCapacity() == other.hasPrefetchQueueCapacity());
      if (hasPrefetchQueueCapacity()) {
        result = result && (getPrefetchQueueCapacity()
            == other.getPrefetchQueueCapacity());
      }
      result = result && (hasMergeMultipleLabelBoxes() == other.hasMergeMultipleLabelBoxes());
      if (hasMergeMultipleLabelBoxes()) {
        result = result && (getMergeMultipleLabelBoxes()
            == other.getMergeMultipleLabelBoxes());
      }
      result = result && (hasUseMulticlassScores() == other.hasUseMulticlassScores());
      if (hasUseMulticlassScores()) {
        result = result && (getUseMulticlassScores()
            == other.getUseMulticlassScores());
      }
      result = result && (hasAddRegularizationLoss() == other.hasAddRegularizationLoss());
      if (hasAddRegularizationLoss()) {
        result = result && (getAddRegularizationLoss()
            == other.getAddRegularizationLoss());
      }
      result = result && (hasMaxNumberOfBoxes() == other.hasMaxNumberOfBoxes());
      if (hasMaxNumberOfBoxes()) {
        result = result && (getMaxNumberOfBoxes()
            == other.getMaxNumberOfBoxes());
      }
      result = result && (hasUnpadGroundtruthTensors() == other.hasUnpadGroundtruthTensors());
      if (hasUnpadGroundtruthTensors()) {
        result = result && (getUnpadGroundtruthTensors()
            == other.getUnpadGroundtruthTensors());
      }
      result = result && (hasRetainOriginalImages() == other.hasRetainOriginalImages());
      if (hasRetainOriginalImages()) {
        result = result && (getRetainOriginalImages()
            == other.getRetainOriginalImages());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBatchSize()) {
        hash = (37 * hash) + BATCH_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getBatchSize();
      }
      if (getDataAugmentationOptionsCount() > 0) {
        hash = (37 * hash) + DATA_AUGMENTATION_OPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getDataAugmentationOptionsList().hashCode();
      }
      if (hasSyncReplicas()) {
        hash = (37 * hash) + SYNC_REPLICAS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSyncReplicas());
      }
      if (hasKeepCheckpointEveryNHours()) {
        hash = (37 * hash) + KEEP_CHECKPOINT_EVERY_N_HOURS_FIELD_NUMBER;
        hash = (53 * hash) + getKeepCheckpointEveryNHours();
      }
      if (hasOptimizer()) {
        hash = (37 * hash) + OPTIMIZER_FIELD_NUMBER;
        hash = (53 * hash) + getOptimizer().hashCode();
      }
      if (hasGradientClippingByNorm()) {
        hash = (37 * hash) + GRADIENT_CLIPPING_BY_NORM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getGradientClippingByNorm());
      }
      if (hasFineTuneCheckpoint()) {
        hash = (37 * hash) + FINE_TUNE_CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getFineTuneCheckpoint().hashCode();
      }
      if (hasFineTuneCheckpointType()) {
        hash = (37 * hash) + FINE_TUNE_CHECKPOINT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getFineTuneCheckpointType().hashCode();
      }
      if (hasFromDetectionCheckpoint()) {
        hash = (37 * hash) + FROM_DETECTION_CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getFromDetectionCheckpoint());
      }
      if (hasLoadAllDetectionCheckpointVars()) {
        hash = (37 * hash) + LOAD_ALL_DETECTION_CHECKPOINT_VARS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLoadAllDetectionCheckpointVars());
      }
      if (hasNumSteps()) {
        hash = (37 * hash) + NUM_STEPS_FIELD_NUMBER;
        hash = (53 * hash) + getNumSteps();
      }
      if (hasStartupDelaySteps()) {
        hash = (37 * hash) + STARTUP_DELAY_STEPS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getStartupDelaySteps());
      }
      if (hasBiasGradMultiplier()) {
        hash = (37 * hash) + BIAS_GRAD_MULTIPLIER_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getBiasGradMultiplier());
      }
      if (getUpdateTrainableVariablesCount() > 0) {
        hash = (37 * hash) + UPDATE_TRAINABLE_VARIABLES_FIELD_NUMBER;
        hash = (53 * hash) + getUpdateTrainableVariablesList().hashCode();
      }
      if (getFreezeVariablesCount() > 0) {
        hash = (37 * hash) + FREEZE_VARIABLES_FIELD_NUMBER;
        hash = (53 * hash) + getFreezeVariablesList().hashCode();
      }
      if (hasReplicasToAggregate()) {
        hash = (37 * hash) + REPLICAS_TO_AGGREGATE_FIELD_NUMBER;
        hash = (53 * hash) + getReplicasToAggregate();
      }
      if (hasBatchQueueCapacity()) {
        hash = (37 * hash) + BATCH_QUEUE_CAPACITY_FIELD_NUMBER;
        hash = (53 * hash) + getBatchQueueCapacity();
      }
      if (hasNumBatchQueueThreads()) {
        hash = (37 * hash) + NUM_BATCH_QUEUE_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getNumBatchQueueThreads();
      }
      if (hasPrefetchQueueCapacity()) {
        hash = (37 * hash) + PREFETCH_QUEUE_CAPACITY_FIELD_NUMBER;
        hash = (53 * hash) + getPrefetchQueueCapacity();
      }
      if (hasMergeMultipleLabelBoxes()) {
        hash = (37 * hash) + MERGE_MULTIPLE_LABEL_BOXES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getMergeMultipleLabelBoxes());
      }
      if (hasUseMulticlassScores()) {
        hash = (37 * hash) + USE_MULTICLASS_SCORES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUseMulticlassScores());
      }
      if (hasAddRegularizationLoss()) {
        hash = (37 * hash) + ADD_REGULARIZATION_LOSS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAddRegularizationLoss());
      }
      if (hasMaxNumberOfBoxes()) {
        hash = (37 * hash) + MAX_NUMBER_OF_BOXES_FIELD_NUMBER;
        hash = (53 * hash) + getMaxNumberOfBoxes();
      }
      if (hasUnpadGroundtruthTensors()) {
        hash = (37 * hash) + UNPAD_GROUNDTRUTH_TENSORS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUnpadGroundtruthTensors());
      }
      if (hasRetainOriginalImages()) {
        hash = (37 * hash) + RETAIN_ORIGINAL_IMAGES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getRetainOriginalImages());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static object_detection.protos.Train.TrainConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.Train.TrainConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.Train.TrainConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.Train.TrainConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.Train.TrainConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.Train.TrainConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.Train.TrainConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.Train.TrainConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.Train.TrainConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static object_detection.protos.Train.TrainConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.Train.TrainConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.Train.TrainConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(object_detection.protos.Train.TrainConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message for configuring DetectionModel training jobs (train.py).
     * Next id: 26
     * </pre>
     *
     * Protobuf type {@code object_detection.protos.TrainConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:object_detection.protos.TrainConfig)
        object_detection.protos.Train.TrainConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return object_detection.protos.Train.internal_static_object_detection_protos_TrainConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return object_detection.protos.Train.internal_static_object_detection_protos_TrainConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                object_detection.protos.Train.TrainConfig.class, object_detection.protos.Train.TrainConfig.Builder.class);
      }

      // Construct using object_detection.protos.Train.TrainConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataAugmentationOptionsFieldBuilder();
          getOptimizerFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        batchSize_ = 32;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (dataAugmentationOptionsBuilder_ == null) {
          dataAugmentationOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          dataAugmentationOptionsBuilder_.clear();
        }
        syncReplicas_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        keepCheckpointEveryNHours_ = 1000;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (optimizerBuilder_ == null) {
          optimizer_ = null;
        } else {
          optimizerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        gradientClippingByNorm_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        fineTuneCheckpoint_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        fineTuneCheckpointType_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        fromDetectionCheckpoint_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        loadAllDetectionCheckpointVars_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        numSteps_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        startupDelaySteps_ = 15F;
        bitField0_ = (bitField0_ & ~0x00000800);
        biasGradMultiplier_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        updateTrainableVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        freezeVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00004000);
        replicasToAggregate_ = 1;
        bitField0_ = (bitField0_ & ~0x00008000);
        batchQueueCapacity_ = 150;
        bitField0_ = (bitField0_ & ~0x00010000);
        numBatchQueueThreads_ = 8;
        bitField0_ = (bitField0_ & ~0x00020000);
        prefetchQueueCapacity_ = 5;
        bitField0_ = (bitField0_ & ~0x00040000);
        mergeMultipleLabelBoxes_ = false;
        bitField0_ = (bitField0_ & ~0x00080000);
        useMulticlassScores_ = false;
        bitField0_ = (bitField0_ & ~0x00100000);
        addRegularizationLoss_ = true;
        bitField0_ = (bitField0_ & ~0x00200000);
        maxNumberOfBoxes_ = 100;
        bitField0_ = (bitField0_ & ~0x00400000);
        unpadGroundtruthTensors_ = true;
        bitField0_ = (bitField0_ & ~0x00800000);
        retainOriginalImages_ = false;
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return object_detection.protos.Train.internal_static_object_detection_protos_TrainConfig_descriptor;
      }

      @java.lang.Override
      public object_detection.protos.Train.TrainConfig getDefaultInstanceForType() {
        return object_detection.protos.Train.TrainConfig.getDefaultInstance();
      }

      @java.lang.Override
      public object_detection.protos.Train.TrainConfig build() {
        object_detection.protos.Train.TrainConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public object_detection.protos.Train.TrainConfig buildPartial() {
        object_detection.protos.Train.TrainConfig result = new object_detection.protos.Train.TrainConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.batchSize_ = batchSize_;
        if (dataAugmentationOptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            dataAugmentationOptions_ = java.util.Collections.unmodifiableList(dataAugmentationOptions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.dataAugmentationOptions_ = dataAugmentationOptions_;
        } else {
          result.dataAugmentationOptions_ = dataAugmentationOptionsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.syncReplicas_ = syncReplicas_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.keepCheckpointEveryNHours_ = keepCheckpointEveryNHours_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        if (optimizerBuilder_ == null) {
          result.optimizer_ = optimizer_;
        } else {
          result.optimizer_ = optimizerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gradientClippingByNorm_ = gradientClippingByNorm_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.fineTuneCheckpoint_ = fineTuneCheckpoint_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.fineTuneCheckpointType_ = fineTuneCheckpointType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.fromDetectionCheckpoint_ = fromDetectionCheckpoint_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.loadAllDetectionCheckpointVars_ = loadAllDetectionCheckpointVars_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.numSteps_ = numSteps_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.startupDelaySteps_ = startupDelaySteps_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.biasGradMultiplier_ = biasGradMultiplier_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          updateTrainableVariables_ = updateTrainableVariables_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.updateTrainableVariables_ = updateTrainableVariables_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          freezeVariables_ = freezeVariables_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.freezeVariables_ = freezeVariables_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.replicasToAggregate_ = replicasToAggregate_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.batchQueueCapacity_ = batchQueueCapacity_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.numBatchQueueThreads_ = numBatchQueueThreads_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.prefetchQueueCapacity_ = prefetchQueueCapacity_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mergeMultipleLabelBoxes_ = mergeMultipleLabelBoxes_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.useMulticlassScores_ = useMulticlassScores_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.addRegularizationLoss_ = addRegularizationLoss_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.maxNumberOfBoxes_ = maxNumberOfBoxes_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.unpadGroundtruthTensors_ = unpadGroundtruthTensors_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.retainOriginalImages_ = retainOriginalImages_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof object_detection.protos.Train.TrainConfig) {
          return mergeFrom((object_detection.protos.Train.TrainConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(object_detection.protos.Train.TrainConfig other) {
        if (other == object_detection.protos.Train.TrainConfig.getDefaultInstance()) return this;
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (dataAugmentationOptionsBuilder_ == null) {
          if (!other.dataAugmentationOptions_.isEmpty()) {
            if (dataAugmentationOptions_.isEmpty()) {
              dataAugmentationOptions_ = other.dataAugmentationOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDataAugmentationOptionsIsMutable();
              dataAugmentationOptions_.addAll(other.dataAugmentationOptions_);
            }
            onChanged();
          }
        } else {
          if (!other.dataAugmentationOptions_.isEmpty()) {
            if (dataAugmentationOptionsBuilder_.isEmpty()) {
              dataAugmentationOptionsBuilder_.dispose();
              dataAugmentationOptionsBuilder_ = null;
              dataAugmentationOptions_ = other.dataAugmentationOptions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              dataAugmentationOptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataAugmentationOptionsFieldBuilder() : null;
            } else {
              dataAugmentationOptionsBuilder_.addAllMessages(other.dataAugmentationOptions_);
            }
          }
        }
        if (other.hasSyncReplicas()) {
          setSyncReplicas(other.getSyncReplicas());
        }
        if (other.hasKeepCheckpointEveryNHours()) {
          setKeepCheckpointEveryNHours(other.getKeepCheckpointEveryNHours());
        }
        if (other.hasOptimizer()) {
          mergeOptimizer(other.getOptimizer());
        }
        if (other.hasGradientClippingByNorm()) {
          setGradientClippingByNorm(other.getGradientClippingByNorm());
        }
        if (other.hasFineTuneCheckpoint()) {
          bitField0_ |= 0x00000040;
          fineTuneCheckpoint_ = other.fineTuneCheckpoint_;
          onChanged();
        }
        if (other.hasFineTuneCheckpointType()) {
          bitField0_ |= 0x00000080;
          fineTuneCheckpointType_ = other.fineTuneCheckpointType_;
          onChanged();
        }
        if (other.hasFromDetectionCheckpoint()) {
          setFromDetectionCheckpoint(other.getFromDetectionCheckpoint());
        }
        if (other.hasLoadAllDetectionCheckpointVars()) {
          setLoadAllDetectionCheckpointVars(other.getLoadAllDetectionCheckpointVars());
        }
        if (other.hasNumSteps()) {
          setNumSteps(other.getNumSteps());
        }
        if (other.hasStartupDelaySteps()) {
          setStartupDelaySteps(other.getStartupDelaySteps());
        }
        if (other.hasBiasGradMultiplier()) {
          setBiasGradMultiplier(other.getBiasGradMultiplier());
        }
        if (!other.updateTrainableVariables_.isEmpty()) {
          if (updateTrainableVariables_.isEmpty()) {
            updateTrainableVariables_ = other.updateTrainableVariables_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureUpdateTrainableVariablesIsMutable();
            updateTrainableVariables_.addAll(other.updateTrainableVariables_);
          }
          onChanged();
        }
        if (!other.freezeVariables_.isEmpty()) {
          if (freezeVariables_.isEmpty()) {
            freezeVariables_ = other.freezeVariables_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureFreezeVariablesIsMutable();
            freezeVariables_.addAll(other.freezeVariables_);
          }
          onChanged();
        }
        if (other.hasReplicasToAggregate()) {
          setReplicasToAggregate(other.getReplicasToAggregate());
        }
        if (other.hasBatchQueueCapacity()) {
          setBatchQueueCapacity(other.getBatchQueueCapacity());
        }
        if (other.hasNumBatchQueueThreads()) {
          setNumBatchQueueThreads(other.getNumBatchQueueThreads());
        }
        if (other.hasPrefetchQueueCapacity()) {
          setPrefetchQueueCapacity(other.getPrefetchQueueCapacity());
        }
        if (other.hasMergeMultipleLabelBoxes()) {
          setMergeMultipleLabelBoxes(other.getMergeMultipleLabelBoxes());
        }
        if (other.hasUseMulticlassScores()) {
          setUseMulticlassScores(other.getUseMulticlassScores());
        }
        if (other.hasAddRegularizationLoss()) {
          setAddRegularizationLoss(other.getAddRegularizationLoss());
        }
        if (other.hasMaxNumberOfBoxes()) {
          setMaxNumberOfBoxes(other.getMaxNumberOfBoxes());
        }
        if (other.hasUnpadGroundtruthTensors()) {
          setUnpadGroundtruthTensors(other.getUnpadGroundtruthTensors());
        }
        if (other.hasRetainOriginalImages()) {
          setRetainOriginalImages(other.getRetainOriginalImages());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        object_detection.protos.Train.TrainConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (object_detection.protos.Train.TrainConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int batchSize_ = 32;
      /**
       * <pre>
       * Effective batch size to use for training.
       * For TPU (or sync SGD jobs), the batch size per core (or GPU) is going to be
       * `batch_size` / number of cores (or `batch_size` / number of GPUs).
       * </pre>
       *
       * <code>optional uint32 batch_size = 1 [default = 32];</code>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Effective batch size to use for training.
       * For TPU (or sync SGD jobs), the batch size per core (or GPU) is going to be
       * `batch_size` / number of cores (or `batch_size` / number of GPUs).
       * </pre>
       *
       * <code>optional uint32 batch_size = 1 [default = 32];</code>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <pre>
       * Effective batch size to use for training.
       * For TPU (or sync SGD jobs), the batch size per core (or GPU) is going to be
       * `batch_size` / number of cores (or `batch_size` / number of GPUs).
       * </pre>
       *
       * <code>optional uint32 batch_size = 1 [default = 32];</code>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000001;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Effective batch size to use for training.
       * For TPU (or sync SGD jobs), the batch size per core (or GPU) is going to be
       * `batch_size` / number of cores (or `batch_size` / number of GPUs).
       * </pre>
       *
       * <code>optional uint32 batch_size = 1 [default = 32];</code>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        batchSize_ = 32;
        onChanged();
        return this;
      }

      private java.util.List<object_detection.protos.Preprocessor.PreprocessingStep> dataAugmentationOptions_ =
        java.util.Collections.emptyList();
      private void ensureDataAugmentationOptionsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          dataAugmentationOptions_ = new java.util.ArrayList<object_detection.protos.Preprocessor.PreprocessingStep>(dataAugmentationOptions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          object_detection.protos.Preprocessor.PreprocessingStep, object_detection.protos.Preprocessor.PreprocessingStep.Builder, object_detection.protos.Preprocessor.PreprocessingStepOrBuilder> dataAugmentationOptionsBuilder_;

      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public java.util.List<object_detection.protos.Preprocessor.PreprocessingStep> getDataAugmentationOptionsList() {
        if (dataAugmentationOptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataAugmentationOptions_);
        } else {
          return dataAugmentationOptionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public int getDataAugmentationOptionsCount() {
        if (dataAugmentationOptionsBuilder_ == null) {
          return dataAugmentationOptions_.size();
        } else {
          return dataAugmentationOptionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public object_detection.protos.Preprocessor.PreprocessingStep getDataAugmentationOptions(int index) {
        if (dataAugmentationOptionsBuilder_ == null) {
          return dataAugmentationOptions_.get(index);
        } else {
          return dataAugmentationOptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public Builder setDataAugmentationOptions(
          int index, object_detection.protos.Preprocessor.PreprocessingStep value) {
        if (dataAugmentationOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataAugmentationOptionsIsMutable();
          dataAugmentationOptions_.set(index, value);
          onChanged();
        } else {
          dataAugmentationOptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public Builder setDataAugmentationOptions(
          int index, object_detection.protos.Preprocessor.PreprocessingStep.Builder builderForValue) {
        if (dataAugmentationOptionsBuilder_ == null) {
          ensureDataAugmentationOptionsIsMutable();
          dataAugmentationOptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataAugmentationOptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public Builder addDataAugmentationOptions(object_detection.protos.Preprocessor.PreprocessingStep value) {
        if (dataAugmentationOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataAugmentationOptionsIsMutable();
          dataAugmentationOptions_.add(value);
          onChanged();
        } else {
          dataAugmentationOptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public Builder addDataAugmentationOptions(
          int index, object_detection.protos.Preprocessor.PreprocessingStep value) {
        if (dataAugmentationOptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataAugmentationOptionsIsMutable();
          dataAugmentationOptions_.add(index, value);
          onChanged();
        } else {
          dataAugmentationOptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public Builder addDataAugmentationOptions(
          object_detection.protos.Preprocessor.PreprocessingStep.Builder builderForValue) {
        if (dataAugmentationOptionsBuilder_ == null) {
          ensureDataAugmentationOptionsIsMutable();
          dataAugmentationOptions_.add(builderForValue.build());
          onChanged();
        } else {
          dataAugmentationOptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public Builder addDataAugmentationOptions(
          int index, object_detection.protos.Preprocessor.PreprocessingStep.Builder builderForValue) {
        if (dataAugmentationOptionsBuilder_ == null) {
          ensureDataAugmentationOptionsIsMutable();
          dataAugmentationOptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataAugmentationOptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public Builder addAllDataAugmentationOptions(
          java.lang.Iterable<? extends object_detection.protos.Preprocessor.PreprocessingStep> values) {
        if (dataAugmentationOptionsBuilder_ == null) {
          ensureDataAugmentationOptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataAugmentationOptions_);
          onChanged();
        } else {
          dataAugmentationOptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public Builder clearDataAugmentationOptions() {
        if (dataAugmentationOptionsBuilder_ == null) {
          dataAugmentationOptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          dataAugmentationOptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public Builder removeDataAugmentationOptions(int index) {
        if (dataAugmentationOptionsBuilder_ == null) {
          ensureDataAugmentationOptionsIsMutable();
          dataAugmentationOptions_.remove(index);
          onChanged();
        } else {
          dataAugmentationOptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public object_detection.protos.Preprocessor.PreprocessingStep.Builder getDataAugmentationOptionsBuilder(
          int index) {
        return getDataAugmentationOptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public object_detection.protos.Preprocessor.PreprocessingStepOrBuilder getDataAugmentationOptionsOrBuilder(
          int index) {
        if (dataAugmentationOptionsBuilder_ == null) {
          return dataAugmentationOptions_.get(index);  } else {
          return dataAugmentationOptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public java.util.List<? extends object_detection.protos.Preprocessor.PreprocessingStepOrBuilder> 
           getDataAugmentationOptionsOrBuilderList() {
        if (dataAugmentationOptionsBuilder_ != null) {
          return dataAugmentationOptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataAugmentationOptions_);
        }
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public object_detection.protos.Preprocessor.PreprocessingStep.Builder addDataAugmentationOptionsBuilder() {
        return getDataAugmentationOptionsFieldBuilder().addBuilder(
            object_detection.protos.Preprocessor.PreprocessingStep.getDefaultInstance());
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public object_detection.protos.Preprocessor.PreprocessingStep.Builder addDataAugmentationOptionsBuilder(
          int index) {
        return getDataAugmentationOptionsFieldBuilder().addBuilder(
            index, object_detection.protos.Preprocessor.PreprocessingStep.getDefaultInstance());
      }
      /**
       * <pre>
       * Data augmentation options.
       * </pre>
       *
       * <code>repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;</code>
       */
      public java.util.List<object_detection.protos.Preprocessor.PreprocessingStep.Builder> 
           getDataAugmentationOptionsBuilderList() {
        return getDataAugmentationOptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          object_detection.protos.Preprocessor.PreprocessingStep, object_detection.protos.Preprocessor.PreprocessingStep.Builder, object_detection.protos.Preprocessor.PreprocessingStepOrBuilder> 
          getDataAugmentationOptionsFieldBuilder() {
        if (dataAugmentationOptionsBuilder_ == null) {
          dataAugmentationOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              object_detection.protos.Preprocessor.PreprocessingStep, object_detection.protos.Preprocessor.PreprocessingStep.Builder, object_detection.protos.Preprocessor.PreprocessingStepOrBuilder>(
                  dataAugmentationOptions_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          dataAugmentationOptions_ = null;
        }
        return dataAugmentationOptionsBuilder_;
      }

      private boolean syncReplicas_ ;
      /**
       * <pre>
       * Whether to synchronize replicas during training.
       * </pre>
       *
       * <code>optional bool sync_replicas = 3 [default = false];</code>
       */
      public boolean hasSyncReplicas() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Whether to synchronize replicas during training.
       * </pre>
       *
       * <code>optional bool sync_replicas = 3 [default = false];</code>
       */
      public boolean getSyncReplicas() {
        return syncReplicas_;
      }
      /**
       * <pre>
       * Whether to synchronize replicas during training.
       * </pre>
       *
       * <code>optional bool sync_replicas = 3 [default = false];</code>
       */
      public Builder setSyncReplicas(boolean value) {
        bitField0_ |= 0x00000004;
        syncReplicas_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to synchronize replicas during training.
       * </pre>
       *
       * <code>optional bool sync_replicas = 3 [default = false];</code>
       */
      public Builder clearSyncReplicas() {
        bitField0_ = (bitField0_ & ~0x00000004);
        syncReplicas_ = false;
        onChanged();
        return this;
      }

      private int keepCheckpointEveryNHours_ = 1000;
      /**
       * <pre>
       * How frequently to keep checkpoints.
       * </pre>
       *
       * <code>optional uint32 keep_checkpoint_every_n_hours = 4 [default = 1000];</code>
       */
      public boolean hasKeepCheckpointEveryNHours() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * How frequently to keep checkpoints.
       * </pre>
       *
       * <code>optional uint32 keep_checkpoint_every_n_hours = 4 [default = 1000];</code>
       */
      public int getKeepCheckpointEveryNHours() {
        return keepCheckpointEveryNHours_;
      }
      /**
       * <pre>
       * How frequently to keep checkpoints.
       * </pre>
       *
       * <code>optional uint32 keep_checkpoint_every_n_hours = 4 [default = 1000];</code>
       */
      public Builder setKeepCheckpointEveryNHours(int value) {
        bitField0_ |= 0x00000008;
        keepCheckpointEveryNHours_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * How frequently to keep checkpoints.
       * </pre>
       *
       * <code>optional uint32 keep_checkpoint_every_n_hours = 4 [default = 1000];</code>
       */
      public Builder clearKeepCheckpointEveryNHours() {
        bitField0_ = (bitField0_ & ~0x00000008);
        keepCheckpointEveryNHours_ = 1000;
        onChanged();
        return this;
      }

      private object_detection.protos.OptimizerOuterClass.Optimizer optimizer_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          object_detection.protos.OptimizerOuterClass.Optimizer, object_detection.protos.OptimizerOuterClass.Optimizer.Builder, object_detection.protos.OptimizerOuterClass.OptimizerOrBuilder> optimizerBuilder_;
      /**
       * <pre>
       * Optimizer used to train the DetectionModel.
       * </pre>
       *
       * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
       */
      public boolean hasOptimizer() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Optimizer used to train the DetectionModel.
       * </pre>
       *
       * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
       */
      public object_detection.protos.OptimizerOuterClass.Optimizer getOptimizer() {
        if (optimizerBuilder_ == null) {
          return optimizer_ == null ? object_detection.protos.OptimizerOuterClass.Optimizer.getDefaultInstance() : optimizer_;
        } else {
          return optimizerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Optimizer used to train the DetectionModel.
       * </pre>
       *
       * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
       */
      public Builder setOptimizer(object_detection.protos.OptimizerOuterClass.Optimizer value) {
        if (optimizerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          optimizer_ = value;
          onChanged();
        } else {
          optimizerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * Optimizer used to train the DetectionModel.
       * </pre>
       *
       * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
       */
      public Builder setOptimizer(
          object_detection.protos.OptimizerOuterClass.Optimizer.Builder builderForValue) {
        if (optimizerBuilder_ == null) {
          optimizer_ = builderForValue.build();
          onChanged();
        } else {
          optimizerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * Optimizer used to train the DetectionModel.
       * </pre>
       *
       * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
       */
      public Builder mergeOptimizer(object_detection.protos.OptimizerOuterClass.Optimizer value) {
        if (optimizerBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              optimizer_ != null &&
              optimizer_ != object_detection.protos.OptimizerOuterClass.Optimizer.getDefaultInstance()) {
            optimizer_ =
              object_detection.protos.OptimizerOuterClass.Optimizer.newBuilder(optimizer_).mergeFrom(value).buildPartial();
          } else {
            optimizer_ = value;
          }
          onChanged();
        } else {
          optimizerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * Optimizer used to train the DetectionModel.
       * </pre>
       *
       * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
       */
      public Builder clearOptimizer() {
        if (optimizerBuilder_ == null) {
          optimizer_ = null;
          onChanged();
        } else {
          optimizerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       * Optimizer used to train the DetectionModel.
       * </pre>
       *
       * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
       */
      public object_detection.protos.OptimizerOuterClass.Optimizer.Builder getOptimizerBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getOptimizerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Optimizer used to train the DetectionModel.
       * </pre>
       *
       * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
       */
      public object_detection.protos.OptimizerOuterClass.OptimizerOrBuilder getOptimizerOrBuilder() {
        if (optimizerBuilder_ != null) {
          return optimizerBuilder_.getMessageOrBuilder();
        } else {
          return optimizer_ == null ?
              object_detection.protos.OptimizerOuterClass.Optimizer.getDefaultInstance() : optimizer_;
        }
      }
      /**
       * <pre>
       * Optimizer used to train the DetectionModel.
       * </pre>
       *
       * <code>optional .object_detection.protos.Optimizer optimizer = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          object_detection.protos.OptimizerOuterClass.Optimizer, object_detection.protos.OptimizerOuterClass.Optimizer.Builder, object_detection.protos.OptimizerOuterClass.OptimizerOrBuilder> 
          getOptimizerFieldBuilder() {
        if (optimizerBuilder_ == null) {
          optimizerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              object_detection.protos.OptimizerOuterClass.Optimizer, object_detection.protos.OptimizerOuterClass.Optimizer.Builder, object_detection.protos.OptimizerOuterClass.OptimizerOrBuilder>(
                  getOptimizer(),
                  getParentForChildren(),
                  isClean());
          optimizer_ = null;
        }
        return optimizerBuilder_;
      }

      private float gradientClippingByNorm_ ;
      /**
       * <pre>
       * If greater than 0, clips gradients by this value.
       * </pre>
       *
       * <code>optional float gradient_clipping_by_norm = 6 [default = 0];</code>
       */
      public boolean hasGradientClippingByNorm() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * If greater than 0, clips gradients by this value.
       * </pre>
       *
       * <code>optional float gradient_clipping_by_norm = 6 [default = 0];</code>
       */
      public float getGradientClippingByNorm() {
        return gradientClippingByNorm_;
      }
      /**
       * <pre>
       * If greater than 0, clips gradients by this value.
       * </pre>
       *
       * <code>optional float gradient_clipping_by_norm = 6 [default = 0];</code>
       */
      public Builder setGradientClippingByNorm(float value) {
        bitField0_ |= 0x00000020;
        gradientClippingByNorm_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If greater than 0, clips gradients by this value.
       * </pre>
       *
       * <code>optional float gradient_clipping_by_norm = 6 [default = 0];</code>
       */
      public Builder clearGradientClippingByNorm() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gradientClippingByNorm_ = 0F;
        onChanged();
        return this;
      }

      private java.lang.Object fineTuneCheckpoint_ = "";
      /**
       * <pre>
       * Checkpoint to restore variables from. Typically used to load feature
       * extractor variables trained outside of object detection.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
       */
      public boolean hasFineTuneCheckpoint() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * Checkpoint to restore variables from. Typically used to load feature
       * extractor variables trained outside of object detection.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
       */
      public java.lang.String getFineTuneCheckpoint() {
        java.lang.Object ref = fineTuneCheckpoint_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fineTuneCheckpoint_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Checkpoint to restore variables from. Typically used to load feature
       * extractor variables trained outside of object detection.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
       */
      public com.google.protobuf.ByteString
          getFineTuneCheckpointBytes() {
        java.lang.Object ref = fineTuneCheckpoint_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fineTuneCheckpoint_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Checkpoint to restore variables from. Typically used to load feature
       * extractor variables trained outside of object detection.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
       */
      public Builder setFineTuneCheckpoint(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        fineTuneCheckpoint_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Checkpoint to restore variables from. Typically used to load feature
       * extractor variables trained outside of object detection.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
       */
      public Builder clearFineTuneCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000040);
        fineTuneCheckpoint_ = getDefaultInstance().getFineTuneCheckpoint();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Checkpoint to restore variables from. Typically used to load feature
       * extractor variables trained outside of object detection.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint = 7 [default = ""];</code>
       */
      public Builder setFineTuneCheckpointBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        fineTuneCheckpoint_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object fineTuneCheckpointType_ = "";
      /**
       * <pre>
       * Type of checkpoint to restore variables from, e.g. 'classification' or
       * 'detection'. Provides extensibility to from_detection_checkpoint.
       * Typically used to load feature extractor variables from trained models.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
       */
      public boolean hasFineTuneCheckpointType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * Type of checkpoint to restore variables from, e.g. 'classification' or
       * 'detection'. Provides extensibility to from_detection_checkpoint.
       * Typically used to load feature extractor variables from trained models.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
       */
      public java.lang.String getFineTuneCheckpointType() {
        java.lang.Object ref = fineTuneCheckpointType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fineTuneCheckpointType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Type of checkpoint to restore variables from, e.g. 'classification' or
       * 'detection'. Provides extensibility to from_detection_checkpoint.
       * Typically used to load feature extractor variables from trained models.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
       */
      public com.google.protobuf.ByteString
          getFineTuneCheckpointTypeBytes() {
        java.lang.Object ref = fineTuneCheckpointType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fineTuneCheckpointType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Type of checkpoint to restore variables from, e.g. 'classification' or
       * 'detection'. Provides extensibility to from_detection_checkpoint.
       * Typically used to load feature extractor variables from trained models.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
       */
      public Builder setFineTuneCheckpointType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        fineTuneCheckpointType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of checkpoint to restore variables from, e.g. 'classification' or
       * 'detection'. Provides extensibility to from_detection_checkpoint.
       * Typically used to load feature extractor variables from trained models.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
       */
      public Builder clearFineTuneCheckpointType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        fineTuneCheckpointType_ = getDefaultInstance().getFineTuneCheckpointType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of checkpoint to restore variables from, e.g. 'classification' or
       * 'detection'. Provides extensibility to from_detection_checkpoint.
       * Typically used to load feature extractor variables from trained models.
       * </pre>
       *
       * <code>optional string fine_tune_checkpoint_type = 22 [default = ""];</code>
       */
      public Builder setFineTuneCheckpointTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        fineTuneCheckpointType_ = value;
        onChanged();
        return this;
      }

      private boolean fromDetectionCheckpoint_ ;
      /**
       * <pre>
       * [Deprecated]: use fine_tune_checkpoint_type instead.
       * Specifies if the finetune checkpoint is from an object detection model.
       * If from an object detection model, the model being trained should have
       * the same parameters with the exception of the num_classes parameter.
       * If false, it assumes the checkpoint was a object classification model.
       * </pre>
       *
       * <code>optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasFromDetectionCheckpoint() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * [Deprecated]: use fine_tune_checkpoint_type instead.
       * Specifies if the finetune checkpoint is from an object detection model.
       * If from an object detection model, the model being trained should have
       * the same parameters with the exception of the num_classes parameter.
       * If false, it assumes the checkpoint was a object classification model.
       * </pre>
       *
       * <code>optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean getFromDetectionCheckpoint() {
        return fromDetectionCheckpoint_;
      }
      /**
       * <pre>
       * [Deprecated]: use fine_tune_checkpoint_type instead.
       * Specifies if the finetune checkpoint is from an object detection model.
       * If from an object detection model, the model being trained should have
       * the same parameters with the exception of the num_classes parameter.
       * If false, it assumes the checkpoint was a object classification model.
       * </pre>
       *
       * <code>optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setFromDetectionCheckpoint(boolean value) {
        bitField0_ |= 0x00000100;
        fromDetectionCheckpoint_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [Deprecated]: use fine_tune_checkpoint_type instead.
       * Specifies if the finetune checkpoint is from an object detection model.
       * If from an object detection model, the model being trained should have
       * the same parameters with the exception of the num_classes parameter.
       * If false, it assumes the checkpoint was a object classification model.
       * </pre>
       *
       * <code>optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearFromDetectionCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000100);
        fromDetectionCheckpoint_ = false;
        onChanged();
        return this;
      }

      private boolean loadAllDetectionCheckpointVars_ ;
      /**
       * <pre>
       * Whether to load all checkpoint vars that match model variable names and
       * sizes. This option is only available if `from_detection_checkpoint` is
       * True.
       * </pre>
       *
       * <code>optional bool load_all_detection_checkpoint_vars = 19 [default = false];</code>
       */
      public boolean hasLoadAllDetectionCheckpointVars() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * Whether to load all checkpoint vars that match model variable names and
       * sizes. This option is only available if `from_detection_checkpoint` is
       * True.
       * </pre>
       *
       * <code>optional bool load_all_detection_checkpoint_vars = 19 [default = false];</code>
       */
      public boolean getLoadAllDetectionCheckpointVars() {
        return loadAllDetectionCheckpointVars_;
      }
      /**
       * <pre>
       * Whether to load all checkpoint vars that match model variable names and
       * sizes. This option is only available if `from_detection_checkpoint` is
       * True.
       * </pre>
       *
       * <code>optional bool load_all_detection_checkpoint_vars = 19 [default = false];</code>
       */
      public Builder setLoadAllDetectionCheckpointVars(boolean value) {
        bitField0_ |= 0x00000200;
        loadAllDetectionCheckpointVars_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to load all checkpoint vars that match model variable names and
       * sizes. This option is only available if `from_detection_checkpoint` is
       * True.
       * </pre>
       *
       * <code>optional bool load_all_detection_checkpoint_vars = 19 [default = false];</code>
       */
      public Builder clearLoadAllDetectionCheckpointVars() {
        bitField0_ = (bitField0_ & ~0x00000200);
        loadAllDetectionCheckpointVars_ = false;
        onChanged();
        return this;
      }

      private int numSteps_ ;
      /**
       * <pre>
       * Number of steps to train the DetectionModel for. If 0, will train the model
       * indefinitely.
       * </pre>
       *
       * <code>optional uint32 num_steps = 9 [default = 0];</code>
       */
      public boolean hasNumSteps() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * Number of steps to train the DetectionModel for. If 0, will train the model
       * indefinitely.
       * </pre>
       *
       * <code>optional uint32 num_steps = 9 [default = 0];</code>
       */
      public int getNumSteps() {
        return numSteps_;
      }
      /**
       * <pre>
       * Number of steps to train the DetectionModel for. If 0, will train the model
       * indefinitely.
       * </pre>
       *
       * <code>optional uint32 num_steps = 9 [default = 0];</code>
       */
      public Builder setNumSteps(int value) {
        bitField0_ |= 0x00000400;
        numSteps_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of steps to train the DetectionModel for. If 0, will train the model
       * indefinitely.
       * </pre>
       *
       * <code>optional uint32 num_steps = 9 [default = 0];</code>
       */
      public Builder clearNumSteps() {
        bitField0_ = (bitField0_ & ~0x00000400);
        numSteps_ = 0;
        onChanged();
        return this;
      }

      private float startupDelaySteps_ = 15F;
      /**
       * <pre>
       * Number of training steps between replica startup.
       * This flag must be set to 0 if sync_replicas is set to true.
       * </pre>
       *
       * <code>optional float startup_delay_steps = 10 [default = 15];</code>
       */
      public boolean hasStartupDelaySteps() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * Number of training steps between replica startup.
       * This flag must be set to 0 if sync_replicas is set to true.
       * </pre>
       *
       * <code>optional float startup_delay_steps = 10 [default = 15];</code>
       */
      public float getStartupDelaySteps() {
        return startupDelaySteps_;
      }
      /**
       * <pre>
       * Number of training steps between replica startup.
       * This flag must be set to 0 if sync_replicas is set to true.
       * </pre>
       *
       * <code>optional float startup_delay_steps = 10 [default = 15];</code>
       */
      public Builder setStartupDelaySteps(float value) {
        bitField0_ |= 0x00000800;
        startupDelaySteps_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of training steps between replica startup.
       * This flag must be set to 0 if sync_replicas is set to true.
       * </pre>
       *
       * <code>optional float startup_delay_steps = 10 [default = 15];</code>
       */
      public Builder clearStartupDelaySteps() {
        bitField0_ = (bitField0_ & ~0x00000800);
        startupDelaySteps_ = 15F;
        onChanged();
        return this;
      }

      private float biasGradMultiplier_ ;
      /**
       * <pre>
       * If greater than 0, multiplies the gradient of bias variables by this
       * amount.
       * </pre>
       *
       * <code>optional float bias_grad_multiplier = 11 [default = 0];</code>
       */
      public boolean hasBiasGradMultiplier() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * If greater than 0, multiplies the gradient of bias variables by this
       * amount.
       * </pre>
       *
       * <code>optional float bias_grad_multiplier = 11 [default = 0];</code>
       */
      public float getBiasGradMultiplier() {
        return biasGradMultiplier_;
      }
      /**
       * <pre>
       * If greater than 0, multiplies the gradient of bias variables by this
       * amount.
       * </pre>
       *
       * <code>optional float bias_grad_multiplier = 11 [default = 0];</code>
       */
      public Builder setBiasGradMultiplier(float value) {
        bitField0_ |= 0x00001000;
        biasGradMultiplier_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If greater than 0, multiplies the gradient of bias variables by this
       * amount.
       * </pre>
       *
       * <code>optional float bias_grad_multiplier = 11 [default = 0];</code>
       */
      public Builder clearBiasGradMultiplier() {
        bitField0_ = (bitField0_ & ~0x00001000);
        biasGradMultiplier_ = 0F;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList updateTrainableVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureUpdateTrainableVariablesIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          updateTrainableVariables_ = new com.google.protobuf.LazyStringArrayList(updateTrainableVariables_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <pre>
       * Variables that should be updated during training. Note that variables which
       * also match the patterns in freeze_variables will be excluded.
       * </pre>
       *
       * <code>repeated string update_trainable_variables = 25;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getUpdateTrainableVariablesList() {
        return updateTrainableVariables_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Variables that should be updated during training. Note that variables which
       * also match the patterns in freeze_variables will be excluded.
       * </pre>
       *
       * <code>repeated string update_trainable_variables = 25;</code>
       */
      public int getUpdateTrainableVariablesCount() {
        return updateTrainableVariables_.size();
      }
      /**
       * <pre>
       * Variables that should be updated during training. Note that variables which
       * also match the patterns in freeze_variables will be excluded.
       * </pre>
       *
       * <code>repeated string update_trainable_variables = 25;</code>
       */
      public java.lang.String getUpdateTrainableVariables(int index) {
        return updateTrainableVariables_.get(index);
      }
      /**
       * <pre>
       * Variables that should be updated during training. Note that variables which
       * also match the patterns in freeze_variables will be excluded.
       * </pre>
       *
       * <code>repeated string update_trainable_variables = 25;</code>
       */
      public com.google.protobuf.ByteString
          getUpdateTrainableVariablesBytes(int index) {
        return updateTrainableVariables_.getByteString(index);
      }
      /**
       * <pre>
       * Variables that should be updated during training. Note that variables which
       * also match the patterns in freeze_variables will be excluded.
       * </pre>
       *
       * <code>repeated string update_trainable_variables = 25;</code>
       */
      public Builder setUpdateTrainableVariables(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUpdateTrainableVariablesIsMutable();
        updateTrainableVariables_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Variables that should be updated during training. Note that variables which
       * also match the patterns in freeze_variables will be excluded.
       * </pre>
       *
       * <code>repeated string update_trainable_variables = 25;</code>
       */
      public Builder addUpdateTrainableVariables(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUpdateTrainableVariablesIsMutable();
        updateTrainableVariables_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Variables that should be updated during training. Note that variables which
       * also match the patterns in freeze_variables will be excluded.
       * </pre>
       *
       * <code>repeated string update_trainable_variables = 25;</code>
       */
      public Builder addAllUpdateTrainableVariables(
          java.lang.Iterable<java.lang.String> values) {
        ensureUpdateTrainableVariablesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, updateTrainableVariables_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Variables that should be updated during training. Note that variables which
       * also match the patterns in freeze_variables will be excluded.
       * </pre>
       *
       * <code>repeated string update_trainable_variables = 25;</code>
       */
      public Builder clearUpdateTrainableVariables() {
        updateTrainableVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Variables that should be updated during training. Note that variables which
       * also match the patterns in freeze_variables will be excluded.
       * </pre>
       *
       * <code>repeated string update_trainable_variables = 25;</code>
       */
      public Builder addUpdateTrainableVariablesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUpdateTrainableVariablesIsMutable();
        updateTrainableVariables_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList freezeVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureFreezeVariablesIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          freezeVariables_ = new com.google.protobuf.LazyStringArrayList(freezeVariables_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <pre>
       * Variables that should not be updated during training. If
       * update_trainable_variables is not empty, only eliminates the included
       * variables according to freeze_variables patterns.
       * </pre>
       *
       * <code>repeated string freeze_variables = 12;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getFreezeVariablesList() {
        return freezeVariables_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Variables that should not be updated during training. If
       * update_trainable_variables is not empty, only eliminates the included
       * variables according to freeze_variables patterns.
       * </pre>
       *
       * <code>repeated string freeze_variables = 12;</code>
       */
      public int getFreezeVariablesCount() {
        return freezeVariables_.size();
      }
      /**
       * <pre>
       * Variables that should not be updated during training. If
       * update_trainable_variables is not empty, only eliminates the included
       * variables according to freeze_variables patterns.
       * </pre>
       *
       * <code>repeated string freeze_variables = 12;</code>
       */
      public java.lang.String getFreezeVariables(int index) {
        return freezeVariables_.get(index);
      }
      /**
       * <pre>
       * Variables that should not be updated during training. If
       * update_trainable_variables is not empty, only eliminates the included
       * variables according to freeze_variables patterns.
       * </pre>
       *
       * <code>repeated string freeze_variables = 12;</code>
       */
      public com.google.protobuf.ByteString
          getFreezeVariablesBytes(int index) {
        return freezeVariables_.getByteString(index);
      }
      /**
       * <pre>
       * Variables that should not be updated during training. If
       * update_trainable_variables is not empty, only eliminates the included
       * variables according to freeze_variables patterns.
       * </pre>
       *
       * <code>repeated string freeze_variables = 12;</code>
       */
      public Builder setFreezeVariables(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFreezeVariablesIsMutable();
        freezeVariables_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Variables that should not be updated during training. If
       * update_trainable_variables is not empty, only eliminates the included
       * variables according to freeze_variables patterns.
       * </pre>
       *
       * <code>repeated string freeze_variables = 12;</code>
       */
      public Builder addFreezeVariables(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFreezeVariablesIsMutable();
        freezeVariables_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Variables that should not be updated during training. If
       * update_trainable_variables is not empty, only eliminates the included
       * variables according to freeze_variables patterns.
       * </pre>
       *
       * <code>repeated string freeze_variables = 12;</code>
       */
      public Builder addAllFreezeVariables(
          java.lang.Iterable<java.lang.String> values) {
        ensureFreezeVariablesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, freezeVariables_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Variables that should not be updated during training. If
       * update_trainable_variables is not empty, only eliminates the included
       * variables according to freeze_variables patterns.
       * </pre>
       *
       * <code>repeated string freeze_variables = 12;</code>
       */
      public Builder clearFreezeVariables() {
        freezeVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Variables that should not be updated during training. If
       * update_trainable_variables is not empty, only eliminates the included
       * variables according to freeze_variables patterns.
       * </pre>
       *
       * <code>repeated string freeze_variables = 12;</code>
       */
      public Builder addFreezeVariablesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFreezeVariablesIsMutable();
        freezeVariables_.add(value);
        onChanged();
        return this;
      }

      private int replicasToAggregate_ = 1;
      /**
       * <pre>
       * Number of replicas to aggregate before making parameter updates.
       * </pre>
       *
       * <code>optional int32 replicas_to_aggregate = 13 [default = 1];</code>
       */
      public boolean hasReplicasToAggregate() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <pre>
       * Number of replicas to aggregate before making parameter updates.
       * </pre>
       *
       * <code>optional int32 replicas_to_aggregate = 13 [default = 1];</code>
       */
      public int getReplicasToAggregate() {
        return replicasToAggregate_;
      }
      /**
       * <pre>
       * Number of replicas to aggregate before making parameter updates.
       * </pre>
       *
       * <code>optional int32 replicas_to_aggregate = 13 [default = 1];</code>
       */
      public Builder setReplicasToAggregate(int value) {
        bitField0_ |= 0x00008000;
        replicasToAggregate_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of replicas to aggregate before making parameter updates.
       * </pre>
       *
       * <code>optional int32 replicas_to_aggregate = 13 [default = 1];</code>
       */
      public Builder clearReplicasToAggregate() {
        bitField0_ = (bitField0_ & ~0x00008000);
        replicasToAggregate_ = 1;
        onChanged();
        return this;
      }

      private int batchQueueCapacity_ = 150;
      /**
       * <pre>
       * Maximum number of elements to store within a queue.
       * </pre>
       *
       * <code>optional int32 batch_queue_capacity = 14 [default = 150];</code>
       */
      public boolean hasBatchQueueCapacity() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <pre>
       * Maximum number of elements to store within a queue.
       * </pre>
       *
       * <code>optional int32 batch_queue_capacity = 14 [default = 150];</code>
       */
      public int getBatchQueueCapacity() {
        return batchQueueCapacity_;
      }
      /**
       * <pre>
       * Maximum number of elements to store within a queue.
       * </pre>
       *
       * <code>optional int32 batch_queue_capacity = 14 [default = 150];</code>
       */
      public Builder setBatchQueueCapacity(int value) {
        bitField0_ |= 0x00010000;
        batchQueueCapacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum number of elements to store within a queue.
       * </pre>
       *
       * <code>optional int32 batch_queue_capacity = 14 [default = 150];</code>
       */
      public Builder clearBatchQueueCapacity() {
        bitField0_ = (bitField0_ & ~0x00010000);
        batchQueueCapacity_ = 150;
        onChanged();
        return this;
      }

      private int numBatchQueueThreads_ = 8;
      /**
       * <pre>
       * Number of threads to use for batching.
       * </pre>
       *
       * <code>optional int32 num_batch_queue_threads = 15 [default = 8];</code>
       */
      public boolean hasNumBatchQueueThreads() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <pre>
       * Number of threads to use for batching.
       * </pre>
       *
       * <code>optional int32 num_batch_queue_threads = 15 [default = 8];</code>
       */
      public int getNumBatchQueueThreads() {
        return numBatchQueueThreads_;
      }
      /**
       * <pre>
       * Number of threads to use for batching.
       * </pre>
       *
       * <code>optional int32 num_batch_queue_threads = 15 [default = 8];</code>
       */
      public Builder setNumBatchQueueThreads(int value) {
        bitField0_ |= 0x00020000;
        numBatchQueueThreads_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of threads to use for batching.
       * </pre>
       *
       * <code>optional int32 num_batch_queue_threads = 15 [default = 8];</code>
       */
      public Builder clearNumBatchQueueThreads() {
        bitField0_ = (bitField0_ & ~0x00020000);
        numBatchQueueThreads_ = 8;
        onChanged();
        return this;
      }

      private int prefetchQueueCapacity_ = 5;
      /**
       * <pre>
       * Maximum capacity of the queue used to prefetch assembled batches.
       * </pre>
       *
       * <code>optional int32 prefetch_queue_capacity = 16 [default = 5];</code>
       */
      public boolean hasPrefetchQueueCapacity() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <pre>
       * Maximum capacity of the queue used to prefetch assembled batches.
       * </pre>
       *
       * <code>optional int32 prefetch_queue_capacity = 16 [default = 5];</code>
       */
      public int getPrefetchQueueCapacity() {
        return prefetchQueueCapacity_;
      }
      /**
       * <pre>
       * Maximum capacity of the queue used to prefetch assembled batches.
       * </pre>
       *
       * <code>optional int32 prefetch_queue_capacity = 16 [default = 5];</code>
       */
      public Builder setPrefetchQueueCapacity(int value) {
        bitField0_ |= 0x00040000;
        prefetchQueueCapacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum capacity of the queue used to prefetch assembled batches.
       * </pre>
       *
       * <code>optional int32 prefetch_queue_capacity = 16 [default = 5];</code>
       */
      public Builder clearPrefetchQueueCapacity() {
        bitField0_ = (bitField0_ & ~0x00040000);
        prefetchQueueCapacity_ = 5;
        onChanged();
        return this;
      }

      private boolean mergeMultipleLabelBoxes_ ;
      /**
       * <pre>
       * If true, boxes with the same coordinates will be merged together.
       * This is useful when each box can have multiple labels.
       * Note that only Sigmoid classification losses should be used.
       * </pre>
       *
       * <code>optional bool merge_multiple_label_boxes = 17 [default = false];</code>
       */
      public boolean hasMergeMultipleLabelBoxes() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <pre>
       * If true, boxes with the same coordinates will be merged together.
       * This is useful when each box can have multiple labels.
       * Note that only Sigmoid classification losses should be used.
       * </pre>
       *
       * <code>optional bool merge_multiple_label_boxes = 17 [default = false];</code>
       */
      public boolean getMergeMultipleLabelBoxes() {
        return mergeMultipleLabelBoxes_;
      }
      /**
       * <pre>
       * If true, boxes with the same coordinates will be merged together.
       * This is useful when each box can have multiple labels.
       * Note that only Sigmoid classification losses should be used.
       * </pre>
       *
       * <code>optional bool merge_multiple_label_boxes = 17 [default = false];</code>
       */
      public Builder setMergeMultipleLabelBoxes(boolean value) {
        bitField0_ |= 0x00080000;
        mergeMultipleLabelBoxes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, boxes with the same coordinates will be merged together.
       * This is useful when each box can have multiple labels.
       * Note that only Sigmoid classification losses should be used.
       * </pre>
       *
       * <code>optional bool merge_multiple_label_boxes = 17 [default = false];</code>
       */
      public Builder clearMergeMultipleLabelBoxes() {
        bitField0_ = (bitField0_ & ~0x00080000);
        mergeMultipleLabelBoxes_ = false;
        onChanged();
        return this;
      }

      private boolean useMulticlassScores_ ;
      /**
       * <pre>
       * If true, will use multiclass scores from object annotations as ground
       * truth. Currently only compatible with annotated image inputs.
       * </pre>
       *
       * <code>optional bool use_multiclass_scores = 24 [default = false];</code>
       */
      public boolean hasUseMulticlassScores() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <pre>
       * If true, will use multiclass scores from object annotations as ground
       * truth. Currently only compatible with annotated image inputs.
       * </pre>
       *
       * <code>optional bool use_multiclass_scores = 24 [default = false];</code>
       */
      public boolean getUseMulticlassScores() {
        return useMulticlassScores_;
      }
      /**
       * <pre>
       * If true, will use multiclass scores from object annotations as ground
       * truth. Currently only compatible with annotated image inputs.
       * </pre>
       *
       * <code>optional bool use_multiclass_scores = 24 [default = false];</code>
       */
      public Builder setUseMulticlassScores(boolean value) {
        bitField0_ |= 0x00100000;
        useMulticlassScores_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, will use multiclass scores from object annotations as ground
       * truth. Currently only compatible with annotated image inputs.
       * </pre>
       *
       * <code>optional bool use_multiclass_scores = 24 [default = false];</code>
       */
      public Builder clearUseMulticlassScores() {
        bitField0_ = (bitField0_ & ~0x00100000);
        useMulticlassScores_ = false;
        onChanged();
        return this;
      }

      private boolean addRegularizationLoss_ = true;
      /**
       * <pre>
       * Whether to add regularization loss to `total_loss`. This is true by
       * default and adds all regularization losses defined in the model to
       * `total_loss`.
       * Setting this option to false is very useful while debugging the model and
       * losses.
       * </pre>
       *
       * <code>optional bool add_regularization_loss = 18 [default = true];</code>
       */
      public boolean hasAddRegularizationLoss() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <pre>
       * Whether to add regularization loss to `total_loss`. This is true by
       * default and adds all regularization losses defined in the model to
       * `total_loss`.
       * Setting this option to false is very useful while debugging the model and
       * losses.
       * </pre>
       *
       * <code>optional bool add_regularization_loss = 18 [default = true];</code>
       */
      public boolean getAddRegularizationLoss() {
        return addRegularizationLoss_;
      }
      /**
       * <pre>
       * Whether to add regularization loss to `total_loss`. This is true by
       * default and adds all regularization losses defined in the model to
       * `total_loss`.
       * Setting this option to false is very useful while debugging the model and
       * losses.
       * </pre>
       *
       * <code>optional bool add_regularization_loss = 18 [default = true];</code>
       */
      public Builder setAddRegularizationLoss(boolean value) {
        bitField0_ |= 0x00200000;
        addRegularizationLoss_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to add regularization loss to `total_loss`. This is true by
       * default and adds all regularization losses defined in the model to
       * `total_loss`.
       * Setting this option to false is very useful while debugging the model and
       * losses.
       * </pre>
       *
       * <code>optional bool add_regularization_loss = 18 [default = true];</code>
       */
      public Builder clearAddRegularizationLoss() {
        bitField0_ = (bitField0_ & ~0x00200000);
        addRegularizationLoss_ = true;
        onChanged();
        return this;
      }

      private int maxNumberOfBoxes_ = 100;
      /**
       * <pre>
       * Maximum number of boxes used during training.
       * Set this to at least the maximum amount of boxes in the input data.
       * Otherwise, it may cause "Data loss: Attempted to pad to a smaller size
       * than the input element" errors.
       * </pre>
       *
       * <code>optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasMaxNumberOfBoxes() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <pre>
       * Maximum number of boxes used during training.
       * Set this to at least the maximum amount of boxes in the input data.
       * Otherwise, it may cause "Data loss: Attempted to pad to a smaller size
       * than the input element" errors.
       * </pre>
       *
       * <code>optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];</code>
       */
      @java.lang.Deprecated public int getMaxNumberOfBoxes() {
        return maxNumberOfBoxes_;
      }
      /**
       * <pre>
       * Maximum number of boxes used during training.
       * Set this to at least the maximum amount of boxes in the input data.
       * Otherwise, it may cause "Data loss: Attempted to pad to a smaller size
       * than the input element" errors.
       * </pre>
       *
       * <code>optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setMaxNumberOfBoxes(int value) {
        bitField0_ |= 0x00400000;
        maxNumberOfBoxes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum number of boxes used during training.
       * Set this to at least the maximum amount of boxes in the input data.
       * Otherwise, it may cause "Data loss: Attempted to pad to a smaller size
       * than the input element" errors.
       * </pre>
       *
       * <code>optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearMaxNumberOfBoxes() {
        bitField0_ = (bitField0_ & ~0x00400000);
        maxNumberOfBoxes_ = 100;
        onChanged();
        return this;
      }

      private boolean unpadGroundtruthTensors_ = true;
      /**
       * <pre>
       * Whether to remove padding along `num_boxes` dimension of the groundtruth
       * tensors.
       * </pre>
       *
       * <code>optional bool unpad_groundtruth_tensors = 21 [default = true];</code>
       */
      public boolean hasUnpadGroundtruthTensors() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <pre>
       * Whether to remove padding along `num_boxes` dimension of the groundtruth
       * tensors.
       * </pre>
       *
       * <code>optional bool unpad_groundtruth_tensors = 21 [default = true];</code>
       */
      public boolean getUnpadGroundtruthTensors() {
        return unpadGroundtruthTensors_;
      }
      /**
       * <pre>
       * Whether to remove padding along `num_boxes` dimension of the groundtruth
       * tensors.
       * </pre>
       *
       * <code>optional bool unpad_groundtruth_tensors = 21 [default = true];</code>
       */
      public Builder setUnpadGroundtruthTensors(boolean value) {
        bitField0_ |= 0x00800000;
        unpadGroundtruthTensors_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to remove padding along `num_boxes` dimension of the groundtruth
       * tensors.
       * </pre>
       *
       * <code>optional bool unpad_groundtruth_tensors = 21 [default = true];</code>
       */
      public Builder clearUnpadGroundtruthTensors() {
        bitField0_ = (bitField0_ & ~0x00800000);
        unpadGroundtruthTensors_ = true;
        onChanged();
        return this;
      }

      private boolean retainOriginalImages_ ;
      /**
       * <pre>
       * Whether to retain original images (i.e. not pre-processed) in the tensor
       * dictionary, so that they can be displayed in Tensorboard. Note that this
       * will lead to a larger memory footprint.
       * </pre>
       *
       * <code>optional bool retain_original_images = 23 [default = false];</code>
       */
      public boolean hasRetainOriginalImages() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <pre>
       * Whether to retain original images (i.e. not pre-processed) in the tensor
       * dictionary, so that they can be displayed in Tensorboard. Note that this
       * will lead to a larger memory footprint.
       * </pre>
       *
       * <code>optional bool retain_original_images = 23 [default = false];</code>
       */
      public boolean getRetainOriginalImages() {
        return retainOriginalImages_;
      }
      /**
       * <pre>
       * Whether to retain original images (i.e. not pre-processed) in the tensor
       * dictionary, so that they can be displayed in Tensorboard. Note that this
       * will lead to a larger memory footprint.
       * </pre>
       *
       * <code>optional bool retain_original_images = 23 [default = false];</code>
       */
      public Builder setRetainOriginalImages(boolean value) {
        bitField0_ |= 0x01000000;
        retainOriginalImages_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to retain original images (i.e. not pre-processed) in the tensor
       * dictionary, so that they can be displayed in Tensorboard. Note that this
       * will lead to a larger memory footprint.
       * </pre>
       *
       * <code>optional bool retain_original_images = 23 [default = false];</code>
       */
      public Builder clearRetainOriginalImages() {
        bitField0_ = (bitField0_ & ~0x01000000);
        retainOriginalImages_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:object_detection.protos.TrainConfig)
    }

    // @@protoc_insertion_point(class_scope:object_detection.protos.TrainConfig)
    private static final object_detection.protos.Train.TrainConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new object_detection.protos.Train.TrainConfig();
    }

    public static object_detection.protos.Train.TrainConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TrainConfig>
        PARSER = new com.google.protobuf.AbstractParser<TrainConfig>() {
      @java.lang.Override
      public TrainConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TrainConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TrainConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TrainConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public object_detection.protos.Train.TrainConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_object_detection_protos_TrainConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_object_detection_protos_TrainConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#object_detection/protos/train.proto\022\027o" +
      "bject_detection.protos\032\'object_detection" +
      "/protos/optimizer.proto\032*object_detectio" +
      "n/protos/preprocessor.proto\"\323\007\n\013TrainCon" +
      "fig\022\026\n\nbatch_size\030\001 \001(\r:\00232\022M\n\031data_augm" +
      "entation_options\030\002 \003(\0132*.object_detectio" +
      "n.protos.PreprocessingStep\022\034\n\rsync_repli" +
      "cas\030\003 \001(\010:\005false\022+\n\035keep_checkpoint_ever" +
      "y_n_hours\030\004 \001(\r:\0041000\0225\n\toptimizer\030\005 \001(\013" +
      "2\".object_detection.protos.Optimizer\022$\n\031" +
      "gradient_clipping_by_norm\030\006 \001(\002:\0010\022\036\n\024fi" +
      "ne_tune_checkpoint\030\007 \001(\t:\000\022#\n\031fine_tune_" +
      "checkpoint_type\030\026 \001(\t:\000\022,\n\031from_detectio" +
      "n_checkpoint\030\010 \001(\010:\005falseB\002\030\001\0221\n\"load_al" +
      "l_detection_checkpoint_vars\030\023 \001(\010:\005false" +
      "\022\024\n\tnum_steps\030\t \001(\r:\0010\022\037\n\023startup_delay_" +
      "steps\030\n \001(\002:\00215\022\037\n\024bias_grad_multiplier\030" +
      "\013 \001(\002:\0010\022\"\n\032update_trainable_variables\030\031" +
      " \003(\t\022\030\n\020freeze_variables\030\014 \003(\t\022 \n\025replic" +
      "as_to_aggregate\030\r \001(\005:\0011\022!\n\024batch_queue_" +
      "capacity\030\016 \001(\005:\003150\022\"\n\027num_batch_queue_t" +
      "hreads\030\017 \001(\005:\0018\022\"\n\027prefetch_queue_capaci" +
      "ty\030\020 \001(\005:\0015\022)\n\032merge_multiple_label_boxe" +
      "s\030\021 \001(\010:\005false\022$\n\025use_multiclass_scores\030" +
      "\030 \001(\010:\005false\022%\n\027add_regularization_loss\030" +
      "\022 \001(\010:\004true\022$\n\023max_number_of_boxes\030\024 \001(\005" +
      ":\003100B\002\030\001\022\'\n\031unpad_groundtruth_tensors\030\025" +
      " \001(\010:\004true\022%\n\026retain_original_images\030\027 \001" +
      "(\010:\005false"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          object_detection.protos.OptimizerOuterClass.getDescriptor(),
          object_detection.protos.Preprocessor.getDescriptor(),
        }, assigner);
    internal_static_object_detection_protos_TrainConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_object_detection_protos_TrainConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_object_detection_protos_TrainConfig_descriptor,
        new java.lang.String[] { "BatchSize", "DataAugmentationOptions", "SyncReplicas", "KeepCheckpointEveryNHours", "Optimizer", "GradientClippingByNorm", "FineTuneCheckpoint", "FineTuneCheckpointType", "FromDetectionCheckpoint", "LoadAllDetectionCheckpointVars", "NumSteps", "StartupDelaySteps", "BiasGradMultiplier", "UpdateTrainableVariables", "FreezeVariables", "ReplicasToAggregate", "BatchQueueCapacity", "NumBatchQueueThreads", "PrefetchQueueCapacity", "MergeMultipleLabelBoxes", "UseMulticlassScores", "AddRegularizationLoss", "MaxNumberOfBoxes", "UnpadGroundtruthTensors", "RetainOriginalImages", });
    object_detection.protos.OptimizerOuterClass.getDescriptor();
    object_detection.protos.Preprocessor.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
